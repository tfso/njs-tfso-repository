{"version":3,"file":"baserepository.js","sourceRoot":"","sources":["../../src/repository/baserepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFilterCriteria, FilterCriteria } from './filters/filtercriteria';\r\nimport Enumerable, { IEnumerable, IEnumerableOptions } from './../linq/enumerable';\r\nimport { OperatorType } from './../linq/operators/operator';\r\nimport { WhereOperator } from './../linq/operators/whereoperator';\r\n\r\nimport { IRecordSetMeta } from './db/recordset';\r\n\r\nimport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './../linq/expressions/logicalexpression';\r\n\r\nexport { IEnumerable, IRecordSetMeta }\r\n\r\nexport interface IBaseRepository<TEntity, TEntityId> {\r\n    create(entity: TEntity, meta?: IRecordSetMeta): Promise<TEntity>\r\n\r\n    read(id: TEntityId, meta?: IRecordSetMeta): Promise<TEntity>\r\n    readAll(query: IEnumerable<TEntity>, meta?: IRecordSetMeta): Promise<TEntity[]>\r\n\r\n    update(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n    delete(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n}\r\n\r\nexport interface IParentOptions {\r\n    query?: IEnumerable<any>\r\n    keyProperty?: string\r\n    keys?: Array<any>\r\n}\r\n\r\nabstract class BaseRepository<TEntity, TEntityId> implements IBaseRepository<TEntity, TEntityId>, AsyncIterable<TEntity>\r\n{\r\n    constructor() {\r\n\r\n    }\r\n\r\n    abstract read(id: TEntityId): Promise<TEntity>\r\n    abstract read(id: Partial<TEntityId>): Promise<TEntity>\r\n    abstract read(id: TEntityId, meta?: IRecordSetMeta): Promise<TEntity>\r\n    abstract read(id: Partial<TEntityId>, meta?: IRecordSetMeta): Promise<TEntity>\r\n    abstract read(id: TEntityId, meta?: IRecordSetMeta): Promise<TEntity>\r\n\r\n    // ((t) => t.gender == 'female' && t.age >= 16)({gender: 'female', age: 17})     => true\r\n    // ((t) => t.gender == 'female' && t.age >= 16).toString()                       => (t) => t.gender == \\'female\\' && t.age >= 16\r\n    abstract readAll(query: IEnumerable<TEntity>): Promise<TEntity[]>\r\n    abstract readAll(query: IEnumerable<TEntity>, meta?: IRecordSetMeta): Promise<TEntity[]>\r\n    abstract readAll(query: IEnumerable<TEntity>, meta?: IRecordSetMeta, parent?: IParentOptions): Promise<TEntity[]>\r\n\r\n    abstract create(entity: TEntity): Promise<TEntity>\r\n    abstract create(entity: Partial<TEntity>): Promise<TEntity>\r\n    abstract create(entity: TEntity, meta?: IRecordSetMeta): Promise<TEntity>\r\n    abstract create(entity: Partial<TEntity>, meta?: IRecordSetMeta): Promise<TEntity>\r\n    abstract create(entity: Partial<TEntity>, meta?: IRecordSetMeta): Promise<TEntity>\r\n\r\n    abstract update(entity: TEntity): Promise<boolean>\r\n    abstract update(entity: Partial<TEntity>): Promise<boolean>\r\n    abstract update(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n    abstract update(entity: Partial<TEntity>, meta?: IRecordSetMeta): Promise<boolean>\r\n    abstract update(entity: Partial<TEntity>, meta?: IRecordSetMeta): Promise<boolean>\r\n\r\n    abstract delete(entity: TEntity): Promise<boolean>\r\n    abstract delete(entity: Partial<TEntity>): Promise<boolean>\r\n    abstract delete(entity: TEntity, meta?: IRecordSetMeta): Promise<boolean>\r\n    abstract delete(entity: Partial<TEntity>, meta?: IRecordSetMeta): Promise<boolean>\r\n    abstract delete(entity: Partial<TEntity>, meta?: IRecordSetMeta): Promise<boolean>\r\n\r\n    public beginTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public commitTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public rollbackTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected isQueryPageable(query: IEnumerable<TEntity>): boolean {\r\n        let where = query.operations.first(OperatorType.Where);\r\n\r\n        if (where)\r\n            return where.getExpressionCount() == where.getExpressionIntersection().length;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected getCriteriaGroups(query: IEnumerable<TEntity>): Array<FilterCriteria[]> {\r\n        if(query instanceof Enumerable) \r\n        {\r\n            for (let operator of query.operations.values())\r\n                if (operator instanceof WhereOperator) {\r\n                    return Array\r\n                        .from((<WhereOperator<TEntity>>operator).getExpressionGroups())\r\n                        .map(group => Array\r\n                            .from(group)\r\n                            .map(expr => new FilterCriteria(expr))\r\n                        )\r\n                }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    protected getCriteria(query: IEnumerable<TEntity>): FilterCriteria[] \r\n    protected getCriteria(expressions: ILogicalExpression[]): FilterCriteria[]\r\n    protected getCriteria() {\r\n        if(arguments[0] instanceof Enumerable) \r\n        {\r\n            for (let operator of arguments[0].operations.values())\r\n                if (operator instanceof WhereOperator) \r\n                    return (<WhereOperator<TEntity>>operator).getExpressionIntersection().map(expr => new FilterCriteria(expr));\r\n        }\r\n\r\n        if(Array.isArray(arguments[0]))\r\n            return arguments[0].map(expr => new FilterCriteria(expr))\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Async iterable iterator that has the same signature as readAll, may be overridden to support query through pages. \r\n     * Method is protected since it's primary used by getIterable or [Symbol.asyncIterator]\r\n     * @param query \r\n     * @param meta \r\n     */\r\n    protected async * query(query: IEnumerable<TEntity>, meta?: IRecordSetMeta, parent?: IParentOptions): AsyncIterableIterator<TEntity> {\r\n        yield* await this.readAll(query, meta, parent)\r\n    }\r\n\r\n    private async * asyncIterator(options?: IEnumerableOptions<TEntity>, meta?: IRecordSetMeta): AsyncIterableIterator<TEntity> {\r\n        if (!options) options = {};\r\n\r\n        yield* await this.query(options.query || null, meta, { query: options['parent'], keyProperty: options['keyProperty'], keys: options['keys'] });\r\n    }\r\n\r\n    public getIterable(meta?: IRecordSetMeta): AsyncIterable<TEntity> {\r\n        let iterable = {\r\n            [Symbol.asyncIterator]: (options?: IEnumerableOptions<TEntity>) => {\r\n                return this.asyncIterator(options, meta);\r\n            }\r\n        }\r\n\r\n        iterable.constructor = this.constructor;\r\n\r\n        return iterable;\r\n    }\r\n\r\n    [Symbol.asyncIterator] = (options?: IEnumerableOptions<TEntity>) => {\r\n        return this.asyncIterator(options, null);\r\n    }\r\n}\r\n\r\nexport default BaseRepository\r\n\r\n"]}