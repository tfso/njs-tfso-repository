{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../src/repository/filters/filter.ts"],"names":[],"mappings":"AAAA,kMAAkM;AAClM,qEAAqE;AAErE,4BAA4B;AAC5B,sCAAsC;AACtC,GAAG;AAEH,0CAA0C;AAC1C,+CAA+C;AAE/C,qDAAqD;AACrD,oCAAoC;AACpC,OAAO;AAEP,6BAA6B;AAC7B,gCAAgC;AAChC,OAAO;AAEP,2EAA2E;AAC3E,0CAA0C;AAE1C,wCAAwC;AACxC,0CAA0C;AAC1C,sFAAsF;AACtF,gEAAgE;AAChE,wEAAwE;AACxE,0DAA0D;AAC1D,0GAA0G;AAE1G,sCAAsC;AACtC,iHAAiH;AACjH,2BAA2B;AAC3B,uBAAuB;AAEvB,qBAAqB;AAErB,wBAAwB;AACxB,sBAAsB;AACtB,gGAAgG;AAChG,wBAAwB;AAExB,WAAW;AAEX,8DAA8D;AAC9D,4CAA4C;AAC5C,+CAA+C;AAC/C,aAAa;AACb,OAAO;AACP,GAAG","sourcesContent":["//import { IExpression, ExpressionType, ILogicalExpression, LogicalOperatorType, IMemberExpression, ILiteralExpression, IIdentifierExpression } from './../../linq/expressions/expressionvisitor';\r\n//import { IFilterCriteria, FilterCriteria } from './filtercriteria';\r\n\r\n//export interface IFilter {\r\n//    criteria: Array<IFilterCriteria>\r\n//}\r\n\r\n//export class Filter implements IFilter {\r\n//    private _criteria: Array<IFilterCriteria>\r\n\r\n//    constructor(criteria: Array<IFilterCriteria>) {\r\n//        this._criteria = criteria;\r\n//    }\r\n\r\n//    public get criteria() {\r\n//        return this._criteria;\r\n//    }\r\n\r\n//    public static visit(expression: ILogicalExpression): Array<IFilter> {\r\n//        var result: Array<IFilter> = [];\r\n\r\n//        switch (expression.operator) {\r\n//            case LogicalOperatorType.Or:\r\n//                [expression.left, expression.right].forEach((expr: IExpression) => {\r\n//                    if (expr.type == ExpressionType.Logical) {\r\n//                        switch ((<ILogicalExpression>expr).operator) {\r\n//                            case LogicalOperatorType.Or:\r\n//                                result = result.concat((Filter.visit(<ILogicalExpression>expr))); break;\r\n\r\n//                            default:\r\n//                                result.push(new Filter(FilterCriteria.visit(<ILogicalExpression>expr))); break;\r\n//                        }\r\n//                    }\r\n\r\n//                });\r\n\r\n//                break;\r\n//            default:\r\n//                result.push(new Filter(FilterCriteria.visit(<ILogicalExpression>expression)));\r\n//                break;\r\n\r\n//        }\r\n\r\n//        // return only filters that has one or more criteria\r\n//        return result.filter((filter) => {\r\n//            return filter.criteria.length > 0\r\n//        });\r\n//    }\r\n//}"]}