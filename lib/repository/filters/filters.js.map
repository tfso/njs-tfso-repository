{"version":3,"file":"filters.js","sourceRoot":"","sources":["../../../src/repository/filters/filters.ts"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,qEAAqE;AAErE,wGAAwG;AAExG,6BAA6B;AAC7B,4BAA4B;AAE5B,wCAAwC;AACxC,+CAA+C;AAC/C,GAAG;AAEH,qDAAqD;AACrD,2CAA2C;AAE3C,4CAA4C;AAC5C,8EAA8E;AAC9E,0EAA0E;AAC1E,OAAO;AAEP,2BAA2B;AAC3B,8BAA8B;AAC9B,OAAO;AAEP,yBAAyB;AACzB,uCAAuC;AACvC,kDAAkD;AAElD,2DAA2D;AAC3D,iEAAiE;AACjE,sBAAsB;AACtB,OAAO;AAEP,gCAAgC;AAChC,sCAAsC;AACtC,kDAAkD;AAElD,2DAA2D;AAC3D,gEAAgE;AAChE,8CAA8C;AAC9C,gJAAgJ;AAEhJ,+BAA+B;AAC/B,gBAAgB;AAEhB,0CAA0C;AAC1C,qBAAqB;AACrB,OAAO;AACP,GAAG","sourcesContent":["//import { IFilter, Filter } from './filter';\r\n//import { IFilterCriteria, FilterCriteria } from './filtercriteria';\r\n\r\n//import { IExpression, ExpressionType, ILogicalExpression } from './../../linq/expressions/expression';\r\n\r\n//export interface IFilters {\r\n//    groups: Array<IFilter>\r\n\r\n//    getUnion(): Array<IFilterCriteria>\r\n//    getIntersection(): Array<IFilterCriteria>\r\n//}\r\n\r\n//export class Filters<TEntity> implements IFilters {\r\n//    private _groups: Array<IFilter> = [];\r\n\r\n//    constructor(expression: IExpression) {\r\n//        if (expression != null && expression.type == ExpressionType.Logical)\r\n//            this._groups = Filter.visit(<ILogicalExpression>expression);\r\n//    }\r\n\r\n//    public get groups() {\r\n//        return this._groups;\r\n//    }\r\n\r\n//    public getUnion() {\r\n//        if (this._groups.length == 0)\r\n//            return new Array<IFilterCriteria>();\r\n\r\n//        return this.groups.reduce((res, v, idx, arr) => {\r\n//            return new Filter(res.criteria.concat(v.criteria));\r\n//        }).criteria;\r\n//    }\r\n\r\n//    public getIntersection() {\r\n//        if (this.groups.length == 0)\r\n//            return new Array<IFilterCriteria>();\r\n\r\n//        return this.groups.reduce((res, v, idx, arr) => {\r\n//            var criteria = res.criteria.filter((criteria) => {\r\n//                for (let crit of v.criteria)\r\n//                    if (criteria.property == crit.property && criteria.operator == crit.operator && criteria.value == crit.value) return true;\r\n\r\n//                return false;\r\n//            })\r\n\r\n//            return new Filter(criteria);\r\n//        }).criteria\r\n//    }\r\n//}"]}