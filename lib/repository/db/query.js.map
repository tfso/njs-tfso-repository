{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../src/repository/db/query.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRecordSet } from './recordset';\r\nimport Enumerable, { IEnumerable } from './../../linq/enumerable';\r\nimport { WhereOperator } from './../../linq/operators/whereoperator';\r\n\r\nexport interface IInputParameters {\r\n    [name: string]: {\r\n        name: string\r\n        type: any\r\n        value: any\r\n    }\r\n}\r\n\r\nexport abstract class Query<TEntity> implements PromiseLike<IRecordSet<TEntity>> {\r\n\r\n    //protected onFulfilled: (value: IRecordSet<TEntity>) => any | PromiseLike<any>;\r\n    //protected onRejected: (error: any) => any | PromiseLike<any>;\r\n\r\n\r\n    private _parameters: IInputParameters = {};\r\n    private _predicate: (entity: TEntity) => boolean;\r\n    private _predicateFootprint: string;\r\n\r\n    private _query: IEnumerable<TEntity>; \r\n    private _maxExecutionTime: number = 5000;\r\n    private _commandText: string;\r\n    private _hasRun: boolean;\r\n\r\n    private _promise: Promise<IRecordSet<TEntity>>;\r\n\r\n    constructor(maxExecutionTime?: number)\r\n    constructor(query?: IEnumerable<TEntity>, maxExecutionTime?: number)\r\n    constructor()\r\n    {\r\n        switch (arguments.length) {\r\n            case 1:\r\n                if (typeof arguments[1] == 'object')\r\n                    this.query = arguments[0];\r\n                else\r\n                    this._maxExecutionTime = Number(arguments[0]) || 5000;\r\n\r\n                break;\r\n\r\n            case 2:\r\n                this.query = arguments[0];\r\n                this._maxExecutionTime = Number(arguments[1]);\r\n                break;\r\n        }\r\n\r\n        this._hasRun = false;\r\n    }\r\n\r\n    public get query(): IEnumerable<TEntity> {\r\n        if (this._query == null)\r\n            this._query = new Enumerable<TEntity>();\r\n\r\n        return this._query;\r\n    }\r\n\r\n    public set query(value: IEnumerable<TEntity>) {\r\n        this._query = value;\r\n\r\n        if (value != null) {\r\n            for (let operator of value.operations.values())\r\n                if (operator instanceof WhereOperator) {\r\n                    this._predicateFootprint = operator.toString();\r\n\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n\r\n    protected abstract input(name: string, value: any): void\r\n    protected abstract input(name: string, type: any, value: any): void\r\n\r\n    protected set commandText(query: string) {\r\n        if (this._promise)\r\n            throw new Error('Query promise is executed, impossible to change commandText');\r\n\r\n        this._commandText = query;\r\n    }\r\n\r\n    protected get commandText(): string {\r\n        return this._commandText;\r\n    }\r\n\r\n    protected get parameters(): IInputParameters {\r\n        return this._parameters;\r\n    }\r\n    /**\r\n         * Execute the query with the values provided in parameters and commandText and returns\r\n         * a promise as a IRecordset of TEntity\r\n         * @return A promise of the fulfilled IRecordSet<TEntity>\r\n         */\r\n    protected abstract executeQuery(): Promise<IRecordSet<TEntity>>\r\n\r\n    private execute<U>(onFulfilled?: (value: IRecordSet<TEntity>) => U | PromiseLike<U>, onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        var stamped = Date.now();\r\n\r\n        if (!this._promise) {\r\n            this._promise = this.executeQuery()\r\n                .then((recordset) => {\r\n                    if (recordset.executionTime > this._maxExecutionTime || (recordset.executionTime == 0 && (Date.now() - stamped) > this._maxExecutionTime))\r\n                        console.warn(`[WARNING]: Long running query (${(recordset.executionTime > 0 ? recordset.executionTime : Date.now() - stamped)}ms). Consider narrow down the result length (${recordset.length}pcs)${this._predicateFootprint && this._predicateFootprint.length > 0 ? \" for predicate \" + this._predicateFootprint : \"\"};\\n    ${this.commandText}`);\r\n\r\n                    return recordset;\r\n                });\r\n        }\r\n\r\n        return this._promise\r\n            .then(onFulfilled, onRejected);\r\n    }\r\n\r\n    public then<U>(onFulfilled?: (value: IRecordSet<TEntity>) => U | PromiseLike<U>, onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        return this.execute<U>(onFulfilled, onRejected);\r\n    }\r\n\r\n    public catch<U>(onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        return this.execute<U>(undefined, onRejected);\r\n    }\r\n}\r\n\r\nexport { IRecordSet }"]}