{"version":3,"file":"orderbyoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/orderbyoperator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAoD;AACpD,0EAA8I;AAE9I,qBAAsC,SAAQ,mBAAiB;IAG3D,YAAmB,QAA+B;QAC9C,KAAK,CAAC,uBAAY,CAAC,OAAO,CAAC,CAAC;QADb,aAAQ,GAAR,QAAQ,CAAuB;QAG9C,IAAI,CAAC,WAAW,GAAG,IAAI,qCAAiB,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAC;IAEM,CAAE,QAAQ,CAAC,KAAwB;QACtC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,kCAAc,CAAC,MAAM;YAC9C,MAAM,IAAI,SAAS,CAAC,6DAA6D,CAAC,CAAC;QAEvF,IAAI,cAAc,GAAoC,IAAI,CAAC,WAAY,CAAC,QAAQ,EAC5E,QAA+B,CAAC;QAEpC,IAAI,cAAc,CAAC,IAAI,IAAI,kCAAc,CAAC,UAAU;YAChD,MAAM,IAAI,SAAS,CAAC,6DAA6D,CAAC,CAAC;QAEvF,QAAQ,GAA0B,cAAc,CAAC;QAEjD,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACb,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnG,CAAC,CAAC,CAAA;QAEF,KAAK,CAAC,CAAC,EAAE,CAAC;IACd,CAAC;IAEc,aAAa,CAAC,KAA6B;;;YACtD,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,kCAAc,CAAC,MAAM;gBAC9C,MAAM,IAAI,SAAS,CAAC,6DAA6D,CAAC,CAAC;YAEvF,IAAI,cAAc,GAAoC,IAAI,CAAC,WAAY,CAAC,QAAQ,EAC5E,QAA+B,CAAC;YAEpC,IAAI,cAAc,CAAC,IAAI,IAAI,kCAAc,CAAC,UAAU;gBAChD,MAAM,IAAI,SAAS,CAAC,6DAA6D,CAAC,CAAC;YAEvF,QAAQ,GAA0B,cAAc,CAAC;YAEjD,IAAI,EAAE,GAAmB,EAAE,CAAC;;gBAC5B,KAAsB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAjB,IAAI,IAAI,kBAAA,CAAA;oBACd,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAAA;;;;;;;;;YAElB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACb,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnG,CAAC,CAAC,CAAA;YAEF,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,EAAE,CAAA,CAAA,CAAA,CAAC;QACd,CAAC;KAAA;CACJ;AAnDD,0CAmDC","sourcesContent":["import { Operator, OperatorType } from './operator';\r\nimport { ExpressionVisitor, IExpression, ExpressionType, IMemberExpression, IIdentifierExpression } from './../expressions/expressionvisitor';\r\n\r\nexport class OrderByOperator<TEntity> extends Operator<TEntity> {\r\n    private _expression: IExpression;\r\n\r\n    constructor(public property: (it: TEntity) => void) {\r\n        super(OperatorType.OrderBy);\r\n\r\n        this._expression = new ExpressionVisitor().visitLambda(property);\r\n    }\r\n\r\n    public * evaluate(items: Iterable<TEntity>): IterableIterator<TEntity> {\r\n        if (this._expression.type != ExpressionType.Member)\r\n            throw new TypeError('Order by is expecting a member property as sorting property');\r\n\r\n        var memberProperty: IExpression = (<IMemberExpression>this._expression).property,\r\n            property: IIdentifierExpression;\r\n\r\n        if (memberProperty.type != ExpressionType.Identifier)\r\n            throw new TypeError('Order by is expecting a member property as sorting property');\r\n\r\n        property = <IIdentifierExpression>memberProperty;\r\n\r\n        let ar = Array.from(items);\r\n        ar.sort((a, b) => {\r\n            return a[property.name] == b[property.name] ? 0 : a[property.name] < b[property.name] ? -1 : 1;\r\n        })\r\n\r\n        yield* ar;   \r\n    }\r\n\r\n    public async * evaluateAsync(items: AsyncIterable<TEntity>): AsyncIterableIterator<TEntity> {\r\n        if (this._expression.type != ExpressionType.Member)\r\n            throw new TypeError('Order by is expecting a member property as sorting property');\r\n\r\n        var memberProperty: IExpression = (<IMemberExpression>this._expression).property,\r\n            property: IIdentifierExpression;\r\n\r\n        if (memberProperty.type != ExpressionType.Identifier)\r\n            throw new TypeError('Order by is expecting a member property as sorting property');\r\n\r\n        property = <IIdentifierExpression>memberProperty;\r\n\r\n        let ar: Array<TEntity> = [];\r\n        for await(let item of items)\r\n            ar.push(item);\r\n\r\n        ar.sort((a, b) => {\r\n            return a[property.name] == b[property.name] ? 0 : a[property.name] < b[property.name] ? -1 : 1;\r\n        })\r\n\r\n        yield* ar;   \r\n    }\r\n}"]}