{"version":3,"file":"sliceoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/sliceoperator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,yCAAoD;AAEpD,mBAAoC,SAAQ,mBAAiB;IACzD,YAAmB,KAAmB,EAAS,GAAW;QACtD,KAAK,CAAC,uBAAY,CAAC,IAAI,CAAC,CAAC;QADV,UAAK,GAAL,KAAK,CAAc;QAAS,QAAG,GAAH,GAAG,CAAQ;IAE1D,CAAC;IAEM,CAAE,QAAQ,CAAC,KAAwB;QACtC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;QAEb,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YACpB,GAAG,EAAE,CAAC;YAEN,IAAG,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE;gBACtB,IAAK,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK;oBAAG,SAAS;gBAClE,IAAK,OAAO,IAAI,CAAC,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG;oBAAE,SAAS;aACjE;YAED,MAAM,IAAI,CAAC;SACd;IACL,CAAC;IAEc,aAAa,CAAC,KAA6B;;;YACtD,IAAI,GAAG,GAAG,CAAC,CAAC;;gBAEZ,KAAuB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAjB,IAAI,IAAI,kBAAA,CAAA;oBACf,GAAG,EAAE,CAAC;oBAEN,IAAG,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE;wBACtB,IAAK,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK;4BAAG,SAAS;wBAClE,IAAK,OAAO,IAAI,CAAC,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG;4BAAE,SAAS;qBACjE;oBAED,oBAAM,IAAI,CAAA,CAAC;iBACd;;;;;;;;;QACL,CAAC;KAAA;CACJ;AAlCD,sCAkCC","sourcesContent":["import { Operator, OperatorType } from './operator';\n\nexport class SliceOperator<TEntity> extends Operator<TEntity> {\n    constructor(public begin: number | any, public end: number) {\n        super(OperatorType.Skip);\n    }\n\n    public * evaluate(items: Iterable<TEntity>): IterableIterator<TEntity> {\n        let idx = -1;\n\n        for (let item of items) {\n            idx++;\n\n            if(this.removed == false) {\n                if ( typeof this.begin == 'number' && idx < this.begin ) continue;\n                if ( typeof this.end == 'number' && idx >= this.end) continue;\n            }\n\n            yield item;\n        }\n    }\n\n    public async * evaluateAsync(items: AsyncIterable<TEntity>): AsyncIterableIterator<TEntity> {\n        let idx = 0;\n\n        for await (let item of items) {\n            idx++;\n\n            if(this.removed == false) {\n                if ( typeof this.begin == 'number' && idx < this.begin ) continue;\n                if ( typeof this.end == 'number' && idx >= this.end) continue;\n            }\n\n            yield item;\n        }\n    }\n}"]}