{"version":3,"file":"joinoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/joinoperator.ts"],"names":[],"mappings":"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","sourcesContent":["import Enumerable, { IEnumerable } from './../enumerable';\nimport { Operator, OperatorType } from './operator';\nimport { ExpressionVisitor, IExpression, ExpressionType, IMemberExpression, IIdentifierExpression } from './../expressions/expressionvisitor';\n\nexport enum JoinType {\n    Inner, \n    Left\n}\n\n\nexport class JoinOperator<TEntity, TInner, TResult> extends Operator<TResult> {\n    private outerProperty: IExpression;\n    private innerProperty: IExpression;\n\n    constructor(private joinType: JoinType, outerKey: (a: TEntity) => void, innerKey: (b: TInner) => void, private selector: (a: TEntity, b: IEnumerable<TInner>) => TResult, private indexing: boolean = false) {\n        super(OperatorType.Join);\n\n        this.outerProperty = new ExpressionVisitor().visitLambda(outerKey);\n        this.innerProperty = new ExpressionVisitor().visitLambda(innerKey);\n    }\n\n    private getPropertyName(expr: IExpression): string {\n        if (expr.type == ExpressionType.Member && (<IMemberExpression>expr).property.type == ExpressionType.Identifier)\n            return (<IIdentifierExpression>(<IMemberExpression>expr).property).name;\n\n        return undefined;\n    }\n\n    public getOuterKey(outerItem: TEntity): any { \n        let propertyName: string;\n        \n        if ((propertyName = this.getPropertyName(this.outerProperty))) \n            return outerItem[propertyName];\n    \n        return null;\n    }\n\n    public getInnerKey(innerItem: TInner): any {\n        let propertyName: string;\n\n        if ((propertyName = this.getPropertyName(this.innerProperty)))\n            return innerItem[propertyName];\n\n        return null;\n    }\n\n    public * evaluate(outer: Iterable<TEntity>, inner: Iterable<TInner>): IterableIterator<TResult> {\n        let keyvalues = new Map<any, Array<TInner>>(),\n            outerAr: Array<TEntity> = [],\n            outerKeys: Array<any> = [];\n\n        if (this.indexing === true) {\n            for (let a of outer) {\n                outerAr.push(a); outerKeys.push(this.getOuterKey(a));\n            }\n            outer = <any>outerAr;\n        }\n\n        // only able to iterate through once, but build up a Map of <innerKey, TInner[]> to make join match fast \n        for (let b of inner[Symbol.iterator].call(inner, { keyProperty: this.getPropertyName(this.innerProperty), keys: outerKeys })) {\n            let key: any,\n                values: TInner[];\n\n            if ((values = keyvalues.get(key = this.getInnerKey(b))) == null)\n                keyvalues.set(key, values = []);\n\n            values.push(b);\n        }\n\n        for (let a of outer) {\n            let values: TInner[];\n\n            switch (this.joinType) {\n                case JoinType.Inner:\n                    if (values = keyvalues.get(this.getOuterKey(a)))\n                        yield this.selector(a, new Enumerable<TInner>(values))\n\n                    break;\n\n                case JoinType.Left:\n                    if ((values = keyvalues.get(this.getOuterKey(a))) == null)\n                        values = [];\n\n                    yield this.selector(a, new Enumerable<TInner>(values));\n                    break;\n            }\n        }\n\n        keyvalues.clear();\n    }\n\n    public async * evaluateAsync(outer: AsyncIterable<TEntity>, inner: AsyncIterable<TInner>): AsyncIterableIterator<TResult> {\n        let keyvalues = new Map<any, Array<TInner>>(),\n            outerAr: Array<TEntity> = [],\n            outerKeys: Array<any> = [];\n\n        if (this.indexing === true) {\n            for await (let a of outer) {\n                outerAr.push(a); outerKeys.push(this.getOuterKey(a));\n            }\n            outer = <any>outerAr;\n        }\n\n        for await (let b of inner[Symbol.asyncIterator].call(inner, { keyProperty: this.getPropertyName(this.innerProperty), keys: outerKeys }) ) {\n            let key: any,\n                values: TInner[];\n\n            if ((values = keyvalues.get(key = this.getInnerKey(b))) == null)\n                keyvalues.set(key, values = []);\n\n            values.push(b);\n        }\n\n        for await (let a of outer) {\n            let values: TInner[];\n\n            switch(this.joinType) {\n                case JoinType.Inner:\n                    if (values = keyvalues.get(this.getOuterKey(a)))\n                        yield this.selector(a, new Enumerable<TInner>(values))\n\n                    break;\n\n                case JoinType.Left:\n                    if((values = keyvalues.get(this.getOuterKey(a))) == null)\n                        values = [];\n\n                    yield this.selector(a, new Enumerable<TInner>(values));\n                    break;\n            }\n        }\n\n        keyvalues.clear();\n    }\n}"]}