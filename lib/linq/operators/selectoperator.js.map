{"version":3,"file":"selectoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/selectoperator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,yCAAoD;AAEpD,oBAAqC,SAAQ,mBAAiB;IAC1D,YAAmB,QAA6B;QAC5C,KAAK,CAAC,uBAAY,CAAC,MAAM,CAAC,CAAC;QADZ,aAAQ,GAAR,QAAQ,CAAqB;IAEhD,CAAC;IAEK,CAAE,QAAQ,CAAC,KAAwB;QACrC,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YACpB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;SAC5B;IACL,CAAC;IAEc,aAAa,CAAC,KAA6B;;;YACtD,IAAI,GAAG,GAAG,CAAC,CAAC;;gBAEZ,KAAuB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAjB,IAAI,IAAI,kBAAA,CAAA;oBACf,oBAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA,CAAA;iBAC5B;;;;;;;;;QACL,CAAC;KAAA;CACJ;AApBD,wCAoBC","sourcesContent":["import { Operator, OperatorType } from './operator';\n\nexport class SelectOperator<TEntity> extends Operator<TEntity> {\n    constructor(public selector: (it: TEntity) => {}) {\n        super(OperatorType.Select);\n    }\n\n    public* evaluate(items: Iterable<TEntity>): IterableIterator<any> {\n        let idx = 0;\n\n        for (let item of items) {\n            yield this.selector(item)\n        }\n    }\n\n    public async * evaluateAsync(items: AsyncIterable<TEntity>): AsyncIterableIterator<any> {\n        let idx = 0;\n\n        for await (let item of items) {\n            yield this.selector(item)\n        }\n    }\n}"]}