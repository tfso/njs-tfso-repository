{"version":3,"file":"selectoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/selectoperator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,yCAAoD;AAEpD,MAAa,cAAwB,SAAQ,mBAAiB;IAG1D,YAAY,QAAyC;QACjD,KAAK,CAAC,uBAAY,CAAC,MAAM,CAAC,CAAC;QAE3B,IAAG,OAAO,QAAQ,IAAI,QAAQ,EAAE;YAC5B,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;YAErE,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SAC7C;aACI;YACD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;SAC3B;IACL,CAAC;IAEK,CAAE,QAAQ,CAAC,KAAwB;QACrC,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YACpB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;SAC5B;IACL,CAAC;IAEc,aAAa,CAAC,KAA6B;;;YACtD,IAAI,GAAG,GAAG,CAAC,CAAC;;gBAEZ,KAAuB,IAAA,UAAA,cAAA,KAAK,CAAA,WAAA;oBAAjB,IAAI,IAAI,kBAAA,CAAA;oBACf,oBAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA,CAAA;iBAC5B;;;;;;;;;QACL,CAAC;KAAA;CACJ;AA/BD,wCA+BC;AAED,SAAS,QAAQ,CAAC,IAAc,EAAE,MAA2B;IACzD,IAAG,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;QACxB,OAAO,MAAM,CAAA;IAEjB,IAAI,QAAQ,GAAG,EAAE,EACb,MAAM,GAAgC,EAAE,CAAA;IAE5C,KAAI,IAAI,GAAG,IAAI,IAAI,EAAE;QACjB,IAAI,KAAK,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAEtC,IAAG,KAAK,EAAE;YACN,IAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;YAEzB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;SAClC;aACI;YACD,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;SAC9B;KACJ;IAED,KAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC5C,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;KAChD;IAED,OAAO,QAAQ,CAAA;AACnB,CAAC","sourcesContent":["import { Operator, OperatorType } from './operator';\n\nexport class SelectOperator<TEntity> extends Operator<TEntity> {\n    private selector: (it: TEntity) => {}\n    \n    constructor(selector:  string | ((it: TEntity) => {})) {\n        super(OperatorType.Select);\n\n        if(typeof selector == 'string') {\n            let keys = selector ? selector.split(',').map(sel => sel.trim()) : []\n\n            this.selector = (it) => remapper(keys, it)\n        }\n        else {\n            this.selector = selector\n        }\n    }\n\n    public* evaluate(items: Iterable<TEntity>): IterableIterator<any> {\n        let idx = 0;\n\n        for (let item of items) {\n            yield this.selector(item)\n        }\n    }\n\n    public async * evaluateAsync(items: AsyncIterable<TEntity>): AsyncIterableIterator<any> {\n        let idx = 0;\n\n        for await (let item of items) {\n            yield this.selector(item)\n        }\n    }\n}\n\nfunction remapper(keys: string[], object: Record<string, any>): Record<string, any> {\n    if(!keys || keys.length == 0)\n        return object\n\n    let remapped = {},\n        groups: { [key: string]: string[] } = {}\n\n    for(let key of keys) {\n        let match = /([^/]+)\\/(.*)/i.exec(key)\n\n        if(match) {\n            if(!groups[match[1]]) \n                groups[match[1]] = []\n\n            groups[match[1]].push(match[2])\n        }\n        else {\n            remapped[key] = object[key]\n        }\n    }\n\n    for(let [prop, keys] of Object.entries(groups)) {\n        remapped[prop] = remapper(keys, object[prop])\n    }\n\n    return remapped\n}"]}