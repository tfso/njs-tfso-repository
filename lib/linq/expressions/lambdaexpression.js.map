{"version":3,"file":"lambdaexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/lambdaexpression.ts"],"names":[],"mappings":";;AAAA;IAKI,YAAY,MAAkC;QAC1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED;;;;MAIE;IACM,eAAe,CAAC,MAAkC;QACtD,IAAI,MAAM,GAAG;YACT,0CAA0C;YAC1C,yFAAyF,CAAC,wDAAwD;SACrJ,CAAA;QAED,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAE5B,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACrB,IAAI,KAAuB,CAAC;YAE5B,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,EAAE;gBACrC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC9D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;gBAEvD,OAAO,KAAK,CAAC;aAChB;YACD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA9CD,4CA8CC","sourcesContent":["export class LambdaExpression {\r\n    private _expression: string;\r\n    private _parameters: Array<string>;\r\n    private _lambdaFn: ((...it: Array<any>) => any);\r\n\r\n    constructor(lambda: (...it: Array<any>) => any) {\r\n        this.parseExpression(this._lambdaFn = lambda);\r\n    }\r\n\r\n    public get expression(): string {\r\n        return this._expression;\r\n    }\r\n\r\n    public get parameters(): Array<string> {\r\n        return this._parameters;\r\n    }\r\n\r\n    public get lambda(): ((...it: Array<any>) => any) {\r\n        return this._lambdaFn;\r\n    }\r\n\r\n    /**\r\n    * decompilation of a predicate expression extracting the actual expression\r\n    * @param predicate\r\n    * @return string\r\n    */\r\n    private parseExpression(lambda: (...it: Array<any>) => any): void {\r\n        var regexs = [\r\n            /^\\(?\\s*([^)]*?)\\s*\\)?\\s*(?:=>)+\\s*(.*)$/i, //  arrow function; (item) => 5 + 1\r\n            /^(?:function\\s*)?\\(\\s*([^)]*?)\\s*\\)\\s*(?:=>)?\\s*\\{\\s*.*?(?:return)\\s*(.*?)\\;?\\s*\\}\\s*$/i // () => { return 5 + 1 } or function() { return 5 + 1 }\r\n        ]\r\n\r\n        var raw = lambda.toString();\r\n\r\n        regexs.forEach((regex) => {\r\n            var match: RegExpMatchArray;\r\n\r\n            if ((match = raw.match(regex)) !== null) {\r\n                this._parameters = match[1].split(',').map((el) => el.trim());\r\n                this._expression = match[2].replace(/_this/gi, \"this\");\r\n\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n}"]}