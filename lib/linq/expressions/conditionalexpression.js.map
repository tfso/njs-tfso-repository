{"version":3,"file":"conditionalexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/conditionalexpression.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAEvE;;GAEG;AAEH,2BAAmC,SAAQ,uBAAU;IACjD,YAAmB,SAAsB,EAAS,OAAoB,EAAS,OAAoB;QAC/F,KAAK,CAAC,2BAAc,CAAC,WAAW,CAAC,CAAC;QADnB,cAAS,GAAT,SAAS,CAAa;QAAS,YAAO,GAAP,OAAO,CAAa;QAAS,YAAO,GAAP,OAAO,CAAa;IAEnG,CAAC;IAEM,KAAK,CAAC,UAAkC;QAC3C,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;YAC9J,OAAO,IAAI,CAAC;QAEhB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IACtG,CAAC;CACJ;AAfD,sDAeC","sourcesContent":["import { IConditionalExpression } from './interfaces/iconditionalexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\n/**\r\n * Not in use for now\r\n */\r\n\r\nexport class ConditionalExpression extends Expression implements IConditionalExpression {\r\n    constructor(public condition: IExpression, public success: IExpression, public failure: IExpression) {\r\n        super(ExpressionType.Conditional);\r\n    }\r\n\r\n    public equal(expression: IConditionalExpression) {\r\n        if (this.type == expression.type && this.condition.equal(expression.condition) && this.success.equal(expression.success) && this.failure.equal(expression.failure))\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public toString() {\r\n        return `(${this.condition.toString()} ? ${this.success.toString()} : ${this.failure.toString()})`;\r\n    }\r\n}\r\n\r\nexport { IConditionalExpression }"]}