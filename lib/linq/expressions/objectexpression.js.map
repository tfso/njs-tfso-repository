{"version":3,"file":"objectexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/objectexpression.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAEvE,sBAA8B,SAAQ,uBAAU;IAC5C,YAAmB,UAAkC;QACjD,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,eAAU,GAAV,UAAU,CAAwB;IAErD,CAAC;IAEM,KAAK,CAAC,UAA6B;QACtC,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,EAC1F;YACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAC/C;gBACI,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK;oBAC9I,OAAO,KAAK,CAAC;aACpB;YAED,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ;QACX,OAAO,IACH,IAAI,CAAC,UAAU;aACV,GAAG,CAAC,QAAQ,CAAC,EAAE;YACZ,IAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAElC,IAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG;gBACxD,OAAO,GAAG,GAAG,KAAK,QAAQ,CAAC,KAAK,EAAE,CAAA;YAEtC,OAAO,IAAI,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAA;QACnD,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAClB,GAAG,CAAA;IACP,CAAC;CACJ;AAlCD,4CAkCC","sourcesContent":["import { IObjectExpression, IObjectProperty } from './interfaces/iobjectexpression';\nimport { IExpression, Expression, ExpressionType } from './expression';\n\nexport class ObjectExpression extends Expression implements IObjectExpression {\n    constructor(public properties: Array<IObjectProperty>) {\n        super(ExpressionType.Object);\n    }\n\n    public equal(expression: IObjectExpression): boolean {\n        if (this.type == expression.type && this.properties.length == expression.properties.length)\n        {\n            for (let i = 0; i < this.properties.length; i++)\n            {\n                if (this.properties[i].key.equal(expression.properties[i].key) == false || this.properties[i].value.equal(expression.properties[i].value) == false)\n                    return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public toString() {\n        return `{${\n            this.properties\n                .map(property => {\n                    let key = property.key.toString();\n\n                    if(key.charAt(0) == '\"' && key.charAt(key.length - 1) == '\"')\n                        return `${key}: ${property.value}`\n\n                    return `\"${key}\": ${property.value.toString()}`\n                })\n                .join(', ')\n        }}`\n    }\n}\n\nexport { IObjectExpression, IObjectProperty }"]}