{"version":3,"file":"methodexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/methodexpression.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAEvE,sBAA8B,SAAQ,uBAAU;IAC5C,YAAmB,IAAY,EAAS,UAA8B,EAAS,MAAmB;QAC9F,KAAK,CAAC,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,SAAI,GAAJ,IAAI,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAoB;QAAS,WAAM,GAAN,MAAM,CAAa;IAElG,CAAC;IAEM,KAAK,CAAC,UAA6B;QACtC,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAChK;YACI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,UAAU,IAAI,IAAI;gBACxD,OAAO,IAAI,CAAC;YAEhB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM;gBACtD,OAAO,KAAK,CAAC;YAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7C,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK;oBAC3D,OAAO,KAAK,CAAC;aACpB;YAED,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ;QACX,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IAC1J,CAAC;CACJ;AA5BD,4CA4BC","sourcesContent":["import { IMethodExpression } from './interfaces/imethodexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport class MethodExpression extends Expression implements IMethodExpression {\r\n    constructor(public name: string, public parameters: Array<IExpression>, public caller: IExpression) {\r\n        super(ExpressionType.Method);\r\n    }\r\n\r\n    public equal(expression: IMethodExpression): boolean {\r\n        if (this.type == expression.type && this.name == expression.name && ((this.caller == null && expression.caller == null) || this.caller.equal(expression.caller)))\r\n        {\r\n            if (this.parameters == null && expression.parameters == null)\r\n                return true;\r\n\r\n            if (this.parameters.length != expression.parameters.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < this.parameters.length; i++) {\r\n                if (this.parameters[i].equal(expression.parameters[i]) == false)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public toString() {\r\n        return `${this.caller ? `${this.caller.toString()}.` : ''}${this.name}(${(this.parameters || []).map(parameter => parameter.toString()).join(', ')})`;\r\n    }\r\n}\r\n\r\nexport { IMethodExpression }"]}