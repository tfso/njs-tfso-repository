{"version":3,"file":"literalexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/literalexpression.ts"],"names":[],"mappings":";;AACA,6CAAuE;AAEvE,uBAA+B,SAAQ,uBAAU;IAC7C,YAAmB,KAAU;QACzB,KAAK,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC;QADf,UAAK,GAAL,KAAK,CAAK;IAE7B,CAAC;IAEM,KAAK,CAAC,UAA8B;QACvC,OAAO,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;IAC1E,CAAC;IAEM,QAAQ;QACX,QAAO,OAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACvB,KAAK,QAAQ;gBACT,OAAO,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAA;YAEvE,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtC;gBACI,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;SAChD;IACL,CAAC;CACJ;AArBD,8CAqBC","sourcesContent":["import { ILiteralExpression } from './interfaces/iliteralexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport class LiteralExpression extends Expression implements ILiteralExpression {\r\n    constructor(public value: any) {\r\n        super(ExpressionType.Literal);\r\n    }\r\n\r\n    public equal(expression: ILiteralExpression): boolean {\r\n        return this.type == expression.type && this.value == expression.value;\r\n    }\r\n\r\n    public toString() {\r\n        switch(typeof(this.value)) {\r\n            case 'string':\r\n                return `\"${new String(this.value).toString().replace(/\"/g, '\\\"')}\"`\r\n\r\n            case 'object':\r\n                return JSON.stringify(this.value);\r\n\r\n            default:\r\n                return new String(this.value).toString();\r\n        }\r\n    }\r\n}\r\n\r\nexport { ILiteralExpression }"]}