{"version":3,"file":"iexpressionvisitor.js","sourceRoot":"","sources":["../../../../src/linq/expressions/interfaces/iexpressionvisitor.ts"],"names":[],"mappings":"","sourcesContent":["import { IExpression } from './iexpression';\n\nimport { ILiteralExpression } from './iliteralexpression';\nimport { ICompoundExpression } from './icompoundexpression';\nimport { IIdentifierExpression } from './iidentifierexpression';\nimport { IMemberExpression } from './imemberexpression';\nimport { IMethodExpression } from './imethodexpression';\nimport { IUnaryExpression } from './iunaryexpression';\nimport { IBinaryExpression } from './ibinaryexpression';\nimport { ILogicalExpression } from './ilogicalexpression';\nimport { IConditionalExpression } from './iconditionalexpression';\nimport { IArrayExpression } from './iarrayexpression';\nimport { IIndexExpression } from './iindexexpression';\nimport { ITemplateLiteralExpression } from './itemplateliteralexpression';\nimport { IObjectExpression } from './iobjectexpression';\n\nexport interface IExpressionStack {\n    length(): number    \n    push(item: IExpression): void\n    pop(): IExpression \n    peek(steps?: number): IExpression \n}\n\nexport interface IExpressionVisitor {\n    readonly stack: IExpressionStack\n\n    visit(expression: IExpression): IExpression\n    visitLiteral(expression: ILiteralExpression): IExpression \n    visitArray(expression: IArrayExpression): IExpression \n    visitTemplateLiteral(expression: ITemplateLiteralExpression): IExpression \n    visitObject(expression: IObjectExpression): IExpression \n    visitIndex(expression: IIndexExpression): IExpression \n    visitCompound(expression: ICompoundExpression): IExpression \n    visitIdentifier(expression: IIdentifierExpression): IExpression \n    visitBinary(expression: IBinaryExpression): IExpression \n    visitMethod(expression: IMethodExpression): IExpression \n    visitUnary(expression: IUnaryExpression): IExpression \n    visitMember(expression: IMemberExpression): IExpression \n    visitLogical(expression: ILogicalExpression): IExpression \n    visitConditional(expression: IConditionalExpression): IExpression\n}"]}