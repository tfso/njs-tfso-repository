{"version":3,"file":"logicalexpression.js","sourceRoot":"","sources":["../../../src/linq/expressions/logicalexpression.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILogicalExpression, LogicalOperatorType } from './interfaces/ilogicalexpression';\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\nimport { OperatorType } from '../operators/operator';\r\n\r\nexport class LogicalExpression extends Expression implements ILogicalExpression {\r\n    constructor(public operator: LogicalOperatorType, public left: IExpression, public right: IExpression) {\r\n        super(ExpressionType.Logical);\r\n    }\r\n\r\n    public equal(expression: ILogicalExpression) {\r\n        if (this.type == expression.type && this.operator == expression.operator && this.left.equal(expression.left) && this.right.equal(expression.right))\r\n            return true;\r\n\r\n        switch (this.operator) {\r\n            case LogicalOperatorType.And:\r\n            case LogicalOperatorType.Or:\r\n            case LogicalOperatorType.NotEqual:\r\n            case LogicalOperatorType.Equal:\r\n                return this.operator == expression.operator && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.Greater: // 5 > 2 == 2 < 5\r\n                return expression.operator == LogicalOperatorType.Lesser && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.GreaterOrEqual: // 5 >= 2 == 2 <= 5\r\n                return expression.operator == LogicalOperatorType.LesserOrEqual && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.Lesser: // 5 < 2 == 2 > 5\r\n                return expression.operator == LogicalOperatorType.Greater && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n\r\n            case LogicalOperatorType.LesserOrEqual: // 5 <= 2 == 2 >= 5\r\n                return expression.operator == LogicalOperatorType.GreaterOrEqual && this.left.equal(expression.right) && this.right.equal(expression.left);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public toString() {\r\n        let left: string, right: string,\r\n            operator = () => {\r\n                switch (this.operator) {\r\n                    case LogicalOperatorType.And: return '&&';\r\n                    case LogicalOperatorType.Or: return '||';\r\n                    case LogicalOperatorType.Equal: return '==';\r\n                    case LogicalOperatorType.Greater: return '>';\r\n                    case LogicalOperatorType.GreaterOrEqual: return '>=';\r\n                    case LogicalOperatorType.Lesser: return '<';\r\n                    case LogicalOperatorType.LesserOrEqual: return '<=';\r\n                    case LogicalOperatorType.NotEqual: return '!=';\r\n                }\r\n            }\r\n\r\n        switch(this.left.type) {\r\n            case ExpressionType.Binary: \r\n                left = `(${this.left.toString()})`; break;\r\n\r\n           default:\r\n                left = this.left.toString(); break;\r\n        }\r\n\r\n        switch(this.right.type) {\r\n            case ExpressionType.Binary: \r\n                right = `(${this.right.toString()})`; break;\r\n            \r\n           default:\r\n                right = this.right.toString(); break;\r\n        }\r\n\r\n        return (this.operator == LogicalOperatorType.And) ? `(${left} ${operator()} ${right})` : `${left} ${operator()} ${right}`;\r\n    }\r\n}\r\n\r\nexport { ILogicalExpression, LogicalOperatorType }"]}