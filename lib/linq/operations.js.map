{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../src/linq/operations.ts"],"names":[],"mappings":";;AAUA;IAII;QACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAEM,GAAG,CAAC,QAA2B;QAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAEM,MAAM,CAAC,QAA2B;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAExC,IAAI,GAAG,IAAI,CAAC,CAAC,EAAE;YACX,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,QAAQ,CAAC,MAAM,EAAE,CAAC;YAElB,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAuBM,KAAK,CAAC,CAAO;QAChB,IAAG,CAAC,IAAI,IAAI;YACR,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;QAEtC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;YAC1B,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,UAAU,IAAI,IAAI,YAAY,CAAC,CAAC;gBAChE,OAAO,IAAI,CAAC;QAEpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEK,CAAE,MAAM;QACV,OAAO,IAAI,EAAE;YACT,IAAI,KAAK,CAAC;YAEV,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;gBAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;oBAChC,SAAS;gBAEb,KAAK,GAAG,MAAM,IAAI,CAAC;gBACnB,IAAI,KAAK,KAAK,IAAI;oBACd,MAAM;aACb;YAED,IAAI,KAAK,KAAK,IAAI,EAAE,uCAAuC;gBACvD,MAAM;SACb;IACL,CAAC;CACJ;AA3ED,gCA2EC","sourcesContent":["import { Operator, OperatorType } from './operators/operator';\r\nimport { SkipOperator } from './operators/skipoperator';\r\nimport { TakeOperator } from './operators/takeoperator';\r\nimport { WhereOperator } from './operators/whereoperator';\r\nimport { SkipWhileOperator } from './operators/skipwhileoperator';\r\nimport { SliceOperator } from './operators/sliceoperator';\r\nimport { SelectOperator } from './operators/selectoperator';\r\nimport { JoinOperator } from './operators/joinoperator';\r\nimport { OrderByOperator } from './operators/orderbyoperator';\r\n\r\nexport class Operations<TEntity> {\r\n    private _stack: Array<Operator<TEntity>>;\r\n    private _removed: Array<Operator<TEntity>>;\r\n\r\n    constructor() {\r\n        this._stack = [];\r\n        this._removed = [];\r\n    }\r\n\r\n    public add(operator: Operator<TEntity>): void {\r\n        this._stack.push(operator);\r\n    }\r\n\r\n    public remove(operator: Operator<TEntity>): boolean {\r\n        var idx = this._stack.indexOf(operator);\r\n\r\n        if (idx != -1) {\r\n            this._removed.push(operator);\r\n            operator.remove();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n    // https://stackoverflow.com/questions/48207567/derive-generic-type-of-a-class-from-a-specific-factory-method-parameter-value\r\n    public first(): Operator<TEntity>\r\n    public first<T extends SkipOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends SkipWhileOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends TakeOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends WhereOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends SliceOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends SelectOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends OrderByOperator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    public first<T extends Operator<TEntity>>(operator: { new (...args: any[]): T }): T\r\n    \r\n    public first<U extends OperatorType.Skip>(operatorType: U): SkipOperator<TEntity>\r\n    public first<U extends OperatorType.SkipWhile>(operatorType: U): SkipWhileOperator<TEntity>\r\n    public first<U extends OperatorType.Take>(operatorType: U): TakeOperator<TEntity>\r\n    public first<U extends OperatorType.Where>(operatorType: U): WhereOperator<TEntity>\r\n    public first<U extends OperatorType.Slice>(operatorType: U): SliceOperator<TEntity>\r\n    public first<U extends OperatorType.Select>(operatorType: U): SelectOperator<TEntity>\r\n    public first<U extends OperatorType.OrderBy>(operatorType: U): OrderByOperator<TEntity>\r\n\r\n    public first<U extends OperatorType.Join, TInner, TResult>(operatorType: U): JoinOperator<TEntity, TInner, TResult>\r\n    public first<U extends OperatorType>(operatorType: U): Operator<TEntity> \r\n    public first(o?: any): Operator<TEntity> {\r\n        if(o == null)\r\n            return this.values().next().value;\r\n\r\n        for (let item of this.values())\r\n            if (item.type === o || (typeof o == 'function' && item instanceof o))\r\n                return item;\r\n\r\n        return null;\r\n    }\r\n\r\n    public* values(): IterableIterator<Operator<TEntity>> {\r\n        while (true) {\r\n            let reset;\r\n\r\n            for (let item of this._stack) {\r\n                if (this._removed.indexOf(item) >= 0)\r\n                    continue;\r\n\r\n                reset = yield item;\r\n                if (reset === true)\r\n                    break;\r\n            }\r\n\r\n            if (reset !== true) // continue while loop if it's resetted\r\n                break;\r\n        }\r\n    }\r\n}"]}