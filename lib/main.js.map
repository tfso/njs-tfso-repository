{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;AAyBA,IAAG,CAAC,MAAM,CAAC,aAAa;IACnB,MAAc,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,IAAI,qBAAqB,CAAC;AAGlF,gEAAqD;AAOrD,gDAAqF;AAA5E,kCAAA,OAAO,CAAc;AAAe,oCAAA,YAAY,CAAA;AACzD,kBAAe,wBAAU,CAAC","sourcesContent":["// instead of having \"lib: [\"esnext.asynciterable\"] in tsconfig.json\r\ndeclare global {\r\n    interface SymbolConstructor {\r\n        /**\r\n         * A method that returns the default async iterator for an object. Called by the semantics of\r\n         * the for-await-of statement.\r\n         */\r\n        readonly asyncIterator: symbol;\r\n    }\r\n\r\n    interface AsyncIterator<T> {\r\n        next(value?: any): Promise<IteratorResult<T>>;\r\n        return?(value?: any): Promise<IteratorResult<T>>;\r\n        throw?(e?: any): Promise<IteratorResult<T>>;\r\n    }\r\n\r\n    interface AsyncIterable<T> {\r\n        [Symbol.asyncIterator](): AsyncIterator<T>;\r\n    }\r\n\r\n    interface AsyncIterableIterator<T> extends AsyncIterator<T> {\r\n        [Symbol.asyncIterator](): AsyncIterableIterator<T>;\r\n    }\r\n}\r\n\r\nif(!Symbol.asyncIterator)\r\n    (Symbol as any).asyncIterator = Symbol.asyncIterator || \"__@@asyncIterator__\";\r\n\r\n\r\nimport Repository from './repository/baserepository';\r\n\r\n//export { Query } from './repository/db/query';\r\n//export { IRecordSet, RecordSet } from './repository/db/recordset';\r\n\r\nexport { IRecordSetMeta } from './repository/db/recordset';\r\n\r\nexport { default as Enumerable, IEnumerable, OperatorType } from './linq/enumerable';\r\nexport default Repository;"]}