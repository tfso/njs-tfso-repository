{"version":3,"file":"enumerable.js","sourceRoot":"","sources":["../../src/test/enumerable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\r\nimport Enumerable, { IEnumerable, OperatorType } from './../linq/enumerable';\r\nimport { SkipOperator } from './../linq/operators/skipoperator';\r\nimport { WhereOperator } from './../linq/operators/whereoperator';\r\n\r\ninterface ICar {\r\n\r\n    id: number\r\n    location: string\r\n\r\n    optional?: string\r\n\r\n    registrationYear: number\r\n\r\n    type: {\r\n        make: string\r\n        model: string\r\n    }\r\n}\r\n\r\ninterface ISimpleCar {\r\n    id: number\r\n    make: string\r\n    model: string\r\n}\r\n\r\ninterface ILocation {\r\n    location: string\r\n    zipcode: number\r\n    ziparea: string\r\n}\r\n\r\ndescribe(\"When using Enumerable\", () => {\r\n    var cars: Array<ICar>,\r\n        locations: Array<ILocation>;\r\n\r\n    beforeEach(() => {\r\n        cars = [\r\n            <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } },\r\n            <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, optional: 'yes', type: { make: 'NISSAN', model: 'QASHQAI' } },\r\n            <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } },\r\n            <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, optional: 'yes', type: { make: 'NISSAN', model: 'LEAF' } },\r\n            <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, optional: 'yes', type: { make: 'TOYOTA', model: 'COROLLA' } },\r\n            <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, optional: 'yes', type: { make: 'HONDA', model: 'HRV' } },\r\n            <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } },\r\n            <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\r\n        ];\r\n\r\n        locations = [\r\n            <ILocation>{ location: 'SKIEN', zipcode: 3955, ziparea: 'Skien' },\r\n            <ILocation>{ location: 'PORSGRUNN', zipcode: 3949, ziparea: 'Porsgrunn' },\r\n            <ILocation>{ location: 'LANGESUND', zipcode: 3970, ziparea: 'Langesund' },\r\n            <ILocation>{ location: 'HEISTAD', zipcode: 3943, ziparea: 'Porsgrunn' },\r\n            <ILocation>{ location: 'BREVIK', zipcode: 3940, ziparea: 'Porsgrunn' }\r\n        ]\r\n    })\r\n\r\n    describe(\"with copy\", () => {\r\n        \r\n        it(\"should be able to copy\", async() => {\r\n            let original = new Enumerable(cars).where(it => it.location == 'PORSGRUNN'),\r\n                copy = original.copy()\r\n\r\n            assert.equal(copy.toArray().length, 2)\r\n        })\r\n\r\n        it(\"should be able to copy without affect original\", async() => {\r\n            let original = new Enumerable(cars).where(it => it.registrationYear >= 2010),\r\n                copy = original.copy().where(it => it.location == 'PORSGRUNN')\r\n\r\n            assert.equal(original.toArray().length, 4)\r\n            assert.equal(copy.toArray().length, 1)\r\n        })\r\n    })\r\n\r\n    describe(\"with iterable\", () => {\r\n\r\n        it(\"should be able to iterate\", async () => {\r\n            let count = 0;\r\n\r\n            for (let item of new Enumerable(cars).where(it => it.id > 0)) {\r\n                count++;\r\n            }\r\n\r\n            assert.equal(count, 8);\r\n        })\r\n\r\n    })\r\n\r\n    describe(\"with async iterable\", () => {\r\n        let delay: (delay: number) => void, \r\n            list: () => AsyncIterableIterator<ICar>;\r\n\r\n        beforeEach(() => {\r\n            \r\n            delay = (delay: number) => new Promise(resolve => setTimeout(resolve, delay));\r\n            list = async function* () {\r\n                yield <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } }\r\n                yield <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, optional: 'yes', type: { make: 'NISSAN', model: 'QASHQAI' } }\r\n                \r\n                await delay(10)\r\n                    \r\n                yield <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } }\r\n                yield <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, optional: 'yes', type: { make: 'NISSAN', model: 'LEAF' } }\r\n                yield Promise.resolve(<ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, optional: 'yes', type: { make: 'TOYOTA', model: 'COROLLA' } })\r\n                yield <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, optional: 'yes', type: { make: 'HONDA', model: 'HRV' } }\r\n                yield Promise.resolve(<ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } })\r\n                yield <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\r\n            }\r\n        })\r\n\r\n        it(\"should be able to iterate\", async () => {\r\n            let count = 0;\r\n\r\n            for await (let item of new Enumerable(list()).where(it => it.id > 0)) {\r\n                count++;\r\n            }\r\n\r\n            assert.equal(count, 8);\r\n        })\r\n\r\n        it(\"should be able to handle list of items\", async () => {\r\n            let hasItems = false;\r\n\r\n            for await(let item of new Enumerable(list()).where(it => it.id == 3)) {\r\n                hasItems = true;\r\n                assert.equal(item.id, 3);\r\n            }\r\n\r\n            assert.ok(hasItems);\r\n        })\r\n\r\n        it(\"should be able to handle list of promises\", async () => {\r\n            let hasItems = false;\r\n\r\n            for await(let item of new Enumerable(list()).where(it => it.id == 5)) {\r\n                hasItems = true;\r\n                assert.equal(item.id, 5);\r\n            }\r\n\r\n            assert.ok(hasItems);\r\n        })\r\n\r\n        it(\"test\", () => {\r\n            let parents = function* () {\r\n                yield { id: 1, reg: 'Dolly Duck',  year: 1937 }\r\n                yield { id: 2, reg: 'Donald', year: 1934 }\r\n                yield { id: 3, reg: 'Skrue McDuck', year: 1947 }\r\n            }\r\n\r\n            let childs = function* () {\r\n                yield { parent: 2, name: 'Ole', year: 1940 }\r\n                yield { parent: 1, name: 'Hetti', year: 1953 }\r\n                yield { parent: 2, name: 'Dole', year: 1940 }\r\n                yield { parent: 2, name: 'Doffen', year: 1940 }\r\n                yield { parent: 1, name: 'Netti', year: 1953 }\r\n            }\r\n\r\n            let donald = new Enumerable<any>(parents())\r\n                .where(it => it.id == 2)\r\n                .join<any, any>(\r\n                    new Enumerable(childs()).select(it => <any>{ parent: it.parent, name: it.name }),\r\n                    a => a.id, \r\n                    b => b.parent, \r\n                    (a, b) => Object.assign({}, a, { childs: b.toArray() } )\r\n                )\r\n                .first();\r\n\r\n            // \"{\"id\":2,\"reg\":\"Donald\",\"year\":1934,\"childs\":[{\"parent\":2,\"name\":\"Ole\"},{\"parent\":2,\"name\":\"Dole\"},{\"parent\":2,\"name\":\"Doffen\"}]}\"\r\n        })\r\n    })\r\n\r\n    describe(\"with joins\", () => {\r\n\r\n        it(\"should be able to do inner join\", () => {\r\n            let car = new Enumerable<ICar>(cars)\r\n                .where(it => it.id == 2)\r\n                .join<ILocation, any>(new Enumerable(locations).select(it => <any>{ location: it.location, city: it.ziparea }), a => a.location, b => b.location, (a, b) => Object.assign({}, a, b.first()))\r\n                .first();\r\n\r\n            assert.ok(car != null);\r\n            assert.equal(car.id, 2);\r\n            assert.equal(car.city, 'Porsgrunn');\r\n        })\r\n\r\n        it(\"should be able to get all cars from city 'Porsgrunn'\", () => {\r\n\r\n            let cities = new Enumerable<ILocation>(locations)\r\n                .where(it => it.ziparea == 'Porsgrunn')\r\n                \r\n            let list = new Enumerable<ICar>(cars)\r\n                .join<ILocation, any>(cities, outer => outer.location, inner => inner.location, (outer, inner) => outer)\r\n                .toArray();\r\n                \r\n            assert.equal(list.length, 5);\r\n        })\r\n    })\r\n\r\n    describe(\"with Lambda query\", () => {\r\n\r\n        it(\"should be able to do a simple query\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(it => it.location == 'BREVIK');\r\n            query.skip(1);\r\n            query.take(3);\r\n\r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should return nothing when an usolvable query is used\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>(),\r\n                unknown;\r\n\r\n            query.where(it => it.location == 'BREVIK' && unknown == true);\r\n\r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 0);\r\n        })\r\n\r\n        it(\"should be able to do a simple query using one named parameters\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where((it, loc) => it.location == loc, 'BREVIK');\r\n            query.skip(1);\r\n            query.take(3);\r\n\r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should be able to do a simple query using two named parameters\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where((it, loc, year) => it.location == loc && it.registrationYear >= year, 'BREVIK', 2010);\r\n\r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should be able to do a simple query with a nested model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(it => it.type.make == 'TOYOTA');\r\n\r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 2);\r\n        })\r\n    })\r\n\r\n    describe(\"with OData query\", () => {\r\n\r\n        it(\"should be able to do a simple query\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"location eq 'BREVIK'\");\r\n            query.skip(1);\r\n            query.take(3);\r\n\r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 1);\r\n        })\r\n\r\n        it(\"should return nothing when an usolvable query is used\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"location eq 'BREVIK' and unkown eq true\");\r\n           \r\n            let result = query.toArray(cars);\r\n\r\n            assert.equal(result.length, 0);\r\n        })\r\n\r\n        it(\"should be able to do a complex query\", () => {\r\n\r\n            let result = new Enumerable<ICar>(cars)\r\n                .where(\"((id eq 7) or (location eq 'PORSGRUNN')) and registrationYear ge 2000\")\r\n                .toArray();\r\n\r\n            assert.equal(result.length, 3);\r\n        })\r\n\r\n        it(\"should be able to do a complex query with with optional property\", () => {\r\n            let result = new Enumerable<ICar>(cars)\r\n                .where(\"((type/make eq 'TOYOTA') or (optional eq 'yes')) and registrationYear ge 2000\")\r\n                .toArray();\r\n\r\n            assert.equal(result.length, 5);\r\n        })\r\n\r\n        it(\"should be able to do a simple query with a nested model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"type/make eq 'TOYOTA'\");\r\n\r\n            let result = query.toArray(cars);\r\n            assert.equal(result.length, 2);\r\n        })\r\n\r\n        it(\"should be able to rename a flat model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"tolower(Place) eq 'brevik'\");\r\n            query.remap<ICar>((name) => {\r\n                if (name == 'Place') return 'location';\r\n            })\r\n\r\n            let result = query.toArray(cars);\r\n            assert.equal(result.length, 2);\r\n\r\n            let where = query.operations.first(WhereOperator);\r\n        })\r\n\r\n        it(\"should be able to rename a value in a flat model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"tolower(location) eq 'BREVIK'\");\r\n            query.remap((name, value) => {\r\n                if (name == 'location') return value.toLowerCase();\r\n            })\r\n\r\n            let result = query.toArray(cars);\r\n            assert.equal(result.length, 2);\r\n\r\n            let where = query.operations.first(WhereOperator);\r\n        })\r\n\r\n        it(\"should be able to rename a nested model\", () => {\r\n            let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n            query.where(\"tolower(car/make) eq 'toyota'\");\r\n            query.remap((name) => {\r\n                if (name == 'car.make') return 'type.make';\r\n            });\r\n\r\n            let result = query.toArray(cars);\r\n            assert.equal(result.length, 2);\r\n\r\n            let where = query.operations.first(WhereOperator);\r\n        })\r\n    })\r\n\r\n    it(\"should take top 1\", () => {\r\n        var ar = new Enumerable(cars).take(1).toArray();\r\n\r\n        assert.ok(ar.length == 1);\r\n    });\r\n\r\n    it(\"should skip 0\", () => {\r\n        var ar = new Enumerable(cars).skip(0).toArray();\r\n\r\n        assert.equal(ar[0].id, 1);\r\n        assert.equal(ar.length, 8);\r\n    });\r\n\r\n    it(\"should take MAX\", () => {\r\n        var ar = new Enumerable(cars).skip(0).take(Number.MAX_VALUE).toArray();\r\n\r\n        assert.equal(ar[0].id, 1);\r\n        assert.equal(ar.length, 8);\r\n    });\r\n\r\n    it(\"should skip 5\", () => {\r\n        var ar = new Enumerable(cars).skip(5).toArray();\r\n\r\n        assert.ok(ar[0].id == 6);\r\n    });\r\n\r\n    it(\"should skip 5 and take 3\", () => {\r\n        var ar = new Enumerable(cars).skip(5).take(3).toArray();\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 6);\r\n    });\r\n\r\n    it(\"should skip while year is greater than 2010\", () => {\r\n        var ar = new Enumerable(cars).skipWhile(it => it.registrationYear >= 2010).toArray();\r\n\r\n        assert.ok(ar.length == 6);\r\n        assert.ok(ar[0].id == 3);\r\n    })\r\n\r\n    it(\"should order by a property\", () => {\r\n        var ar = new Enumerable(cars).orderBy(it => it.location).toArray();\r\n        \r\n        assert.deepEqual(ar.map(item => item.location), [\"BREVIK\", \"BREVIK\", \"HEISTAD\", \"LANGESUND\", \"LARVIK\", \"PORSGRUNN\", \"PORSGRUNN\", \"SKIEN\"]);\r\n    })\r\n\r\n    it(\"should be able to get first element after order by a property\", () => {\r\n        var el = new Enumerable(cars).orderBy(it => it.location).first();\r\n\r\n        assert.equal(el.id, 5);\r\n    })\r\n\r\n    it(\"should order by a string\", () => {\r\n        var ar = new Enumerable(cars).orderBy('location').toArray();\r\n        \r\n        assert.deepEqual(ar.map(item => item.location), [\"BREVIK\", \"BREVIK\", \"HEISTAD\", \"LANGESUND\", \"LARVIK\", \"PORSGRUNN\", \"PORSGRUNN\", \"SKIEN\"]);\r\n    })\r\n\r\n    it(\"should be able to get first element after order by a string\", () => {\r\n        var el = new Enumerable(cars).orderBy('location').first();\r\n\r\n        assert.equal(el.id, 5);\r\n    })\r\n\r\n    it(\"should slice a portion\", () => {\r\n        var ar = new Enumerable(cars).slice(3, 6).toArray();\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 4);\r\n    })\r\n\r\n    it(\"shouldn't slice a portion when a token is used\", () => {\r\n        var ar = new Enumerable(cars).slice('test').toArray();\r\n\r\n        assert.ok(ar.length == 8);\r\n    })    \r\n\r\n    it(\"should be able to iterate\", () => {\r\n        var enumerable = new Enumerable(cars).take(3),\r\n            ar = Array.from(enumerable);\r\n\r\n        assert.equal(ar.length, 3);\r\n    })\r\n\r\n    it(\"should just work\", () => {\r\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.skip(5)\r\n        query.take(3);\r\n        \r\n        var ar = query.toArray(cars);\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 6);\r\n    })\r\n\r\n    it(\"should iterate through operations\", () => {\r\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.skip(5);\r\n        query.take(3);\r\n\r\n\r\n        var operations = (<Enumerable<ICar>>query).operations.values();\r\n\r\n        var count = 0;\r\n        for (let operator of operations) {\r\n            if (operator) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        assert.equal(count, 2);\r\n    })\r\n\r\n    it(\"should be able to convert list by using select\", () => {\r\n        let car = new Enumerable(cars)\r\n            .where(it => it.id == 2)\r\n            .select<ISimpleCar>(it => ({ id: it.id, make: it.type.make, model: it.type.model }))\r\n            .first();\r\n\r\n        assert.equal(car.id, 2);\r\n        assert.equal(car.make, 'NISSAN');\r\n        assert.equal(car.model, 'QASHQAI');\r\n    })\r\n\r\n    it(\"should be able to convert list by using select by string\", () => {\r\n        let car = new Enumerable(cars)\r\n            .where(it => it.id == 2)\r\n            .select('id, type/make')\r\n            .first();\r\n\r\n        assert.equal(car.id, 2);\r\n        assert.equal(car.type.make, 'NISSAN')\r\n    })\r\n\r\n    it(\"should be able to get first Operator by class\", () => {\r\n        let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.where(it => it.location == 'BREVIK');\r\n        query.skip(5);\r\n        query.take(3);\r\n        query.skip(1);\r\n        query.take(1);\r\n\r\n        let op = query.operations.first(SkipOperator)\r\n\r\n        assert.notEqual(op, null);\r\n        assert.equal(op.type, OperatorType.Skip);\r\n        assert.equal(op.count, 5);\r\n    })\r\n\r\n    it(\"should be able to get first Operator by type\", () => {\r\n        let query: Enumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.where(it => it.location == 'BREVIK');\r\n        query.skip(5);\r\n        query.take(3);\r\n        query.skip(1);\r\n        query.take(1);\r\n\r\n        let op = query.operations.first(OperatorType.Skip);\r\n\r\n        assert.notEqual(op, null);\r\n        assert.equal(op.type, OperatorType.Skip);\r\n        assert.equal(op.count, 5);\r\n    })\r\n\r\n    it(\"should be able to get first Operator by class and remove it for manual operator handling\", () => {\r\n        let query: Enumerable<ICar> = new Enumerable<ICar>(cars),\r\n            skip: SkipOperator<ICar>,\r\n            skipCount: number;\r\n\r\n        query.where(it => it.registrationYear >= 2000);\r\n        query.take(8);\r\n        query.skip(6);\r\n        query.take(3);\r\n        query.skip(1);\r\n\r\n        assert.equal(Array.from(query.operations.values()).length, 5);\r\n\r\n        skip = query.operations.first(OperatorType.Skip);\r\n        \r\n        assert.notEqual(skip, null);\r\n        assert.equal(skip.type, OperatorType.Skip);\r\n        assert.equal(skip.count, 6);\r\n\r\n        query.operations.remove(skip);\r\n\r\n        skip = query.operations.first(OperatorType.Skip);\r\n\r\n        assert.notEqual(skip, null);\r\n        assert.equal(skip.type, OperatorType.Skip);\r\n        assert.equal(skip.count, 1);\r\n\r\n        assert.equal(Array.from(query.operations.values()).length, 4);\r\n\r\n        let mycars = query.toArray();\r\n\r\n        assert.equal(mycars.length, 2);\r\n    })\r\n});\r\n"]}