{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../src/test/repository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAiC;AAEjC,mEAA4E;AAC5E,qDAA6E;AAG7E,mEAAgE;AA4BhE,mBAAoB,SAAQ,wBAAwB;IAEzC,IAAI,CAAC,EAAU;QAClB,OAAO,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;IACjF,CAAC;IAEM,OAAO,CAAC,KAAwB,EAAE,IAAqB;QACzD,IAAI,UAAgB,EAChB,IAAI,GAAG;YACE,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;YAC1F,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE;YACpG,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;YAC9F,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;YACjG,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE;YACjG,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;YAClG,UAAU,GAAS,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;YAC7G,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;SACvG,CAAC;QAEN,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACzC,QAAQ,QAAQ,CAAC,QAAQ,EAAE;gBACvB,KAAK,IAAI;oBACL,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,KAAK,IAAI,CAAC,EAAE;wBAClD,IAAI,IAAI,EAAE;4BACN,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;yBACxB;wBAED,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY;qBACrD;oBAED,MAAM;aACb;SACL;QAED,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,yBAAY,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,IAAI,EAAE;YACN,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,kEAAkE;SACpG;QAED,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,yBAAY,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,IAAI,EAAE;YACN,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,kEAAkE;SACpG;aACI;YACD,IAAI,GAAG,IAAI,2BAAY,CAAC,CAAC,CAAC,CAAA,CAAC,2CAA2C;SACzE;QAED,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,yBAAY,CAAC,KAAK,CAAC,CAAC;QACvD,IAAI,KAAK;YAAE,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAE/C,IAAG,IAAI;YAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAA,CAAC,gCAAgC;QAExE,IAAI,IAAI;YAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,sCAAsC;QAC/E,IAAI,IAAI;YAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,sCAAsC;QAElF,IAAG,IAAI;YAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA,CAAC,sBAAsB;QAEzD,IAAG,IAAI,IAAI,IAAI,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW;gBAC1D,IAAI,CAAC,iBAAiB,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAA;;gBAEvF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;SACpC;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc;IAChD,CAAC;IAEc,KAAK,CAAC,KAAwB,EAAE,IAAqB;;YAChE,IAAG,CAAC,IAAI;gBACJ,IAAI,GAAG,EAAG,CAAA;YAEd,IAAI,IAAI,GAAG,CAAC,CAAA;YACZ,OAAM,IAAI,EAAE;gBACR,IAAI,IAAI,GAAG,cAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA,CAAA;gBAE7D,cAAA,KAAM,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA;gBAEZ,gDAAgD;iBAFpC,CAAA;gBAEZ,gDAAgD;gBAChD,IAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC;oBACzE,MAAM;gBAEV,IAAI,IAAI,IAAI,CAAC,MAAM,CAAA;aACtB;QACL,CAAC;KAAA;IAEM,KAAK,CAAC,MAAM,CAAC,GAAS;QACzB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAS;QACzB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAS;QACzB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEM,uBAAuB,CAAC,KAAwB;QACnD,OAAO,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAEM,mBAAmB,CAAC,KAAwB;QAC/C,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;IAC3C,CAAC;CACJ;AAED,wBAAyB,SAAQ,wBAA6B;IAEnD,IAAI,CAAC,EAAU;QAClB,OAAO,IAAI,oBAAU,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;IACtF,CAAC;IAEM,OAAO,CAAC,KAA6B,EAAE,IAAqB,EAAE,MAAO;QACxE,IAAI,SAAS,GAAG;YACD,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACtD,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;YAC9D,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;YAC9D,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;YAC5D,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE;SACzE,CAAA;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAc;QAC9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAc;QAC9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAc;QAC9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;CACJ;AAED,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACnC,UAAU,CAAC,GAAG,EAAE;IAEhB,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACpC,IAAI,EAAE,GAAG,MAAM,IAAI,oBAAU,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC,YAAY,EAAE,CAAA;QAEjE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;IAC9B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACpC,IAAI,IAAI,GAAmC,EAAE,EACzC,EAAE,GAAG,IAAI,oBAAU,CAAC,IAAI,aAAa,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACrD,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;aACvB,IAAI,CAAC,CAAC,CAAC;aACP,IAAI,CAAiB,IAAI,kBAAkB,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;QAE/H,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC;QAEhC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAE9C,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,IAAI,GAAG,MAAM,IAAI,oBAAU,CAAO,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;QAEnF,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,wBAAU,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAE3C,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,IAAI,GAAG,MAAM,IAAI,oBAAU,CAAO,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;QAEnF,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,wBAAU,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAE7D,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,IAAI,GAAG,MAAM,IAAI,oBAAU,CAAO,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;QAE7F,MAAM,CAAC,EAAE,CAAC,IAAI,YAAY,wBAAU,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAE5E,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,IAAiB,CAAC;QAEtB,IAAI,GAAG,MAAM,IAAI,oBAAU,CAAC,IAAI,CAAC;aAC5B,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,gBAAgB,IAAI,IAAI,CAAC;aACxC,IAAI,CAAC,CAAC,CAAC;aACP,IAAI,CAAC,CAAC,CAAC;aACP,YAAY,EAAE,CAAC;QAEpB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAEhC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,uFAAuF,EAAE,KAAK,IAAI,EAAE;QACnG,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,KAAK,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,gBAAgB,IAAI,IAAI,IAAI,EAAE,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAEvH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAA;IAC5D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;QACjG,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,KAAK,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,IAAI,IAAI,IAAI,EAAE,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC;QAEvG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAA;IAC3D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oGAAoG,EAAE,KAAK,IAAI,EAAE;QAChH,IAAI,IAAI,GAAG,IAAI,aAAa,EAAE,EAC1B,KAAK,GAAG,IAAI,oBAAU,CAAO,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,IAAI,IAAI,IAAI,EAAE,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;QAElI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAA;IAC5D,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import * as assert from 'assert';\r\n\r\nimport Repository, { IRecordSetMeta } from './../repository/baserepository';\r\nimport Enumerable, { IEnumerable, OperatorType } from './../linq/enumerable';\r\nimport { WhereOperator } from './../linq/operators/whereoperator';\r\nimport { SkipOperator } from './../linq/operators/skipoperator';\r\nimport { TakeOperator } from './../linq/operators/takeoperator';\r\n\r\nimport { ExpressionType, IExpression } from './../linq/expressions/expression';\r\n\r\nimport { IIdentifierExpression } from './../linq/expressions/identifierexpression';\r\nimport { ILiteralExpression } from './../linq/expressions/literalexpression';\r\nimport { LogicalOperatorType } from './../linq/expressions/logicalexpression';\r\n\r\ninterface ICar {\r\n    id: number\r\n    location: string\r\n\r\n    optional?: string\r\n\r\n    registrationYear: number\r\n\r\n    type: {\r\n        make: string\r\n        model: string\r\n    }\r\n}\r\n\r\ninterface ILocation {\r\n    location: string\r\n    zipcode: number\r\n    ziparea: string\r\n}\r\n\r\nclass CarRepository extends Repository<ICar, number>\r\n{\r\n    public read(id: number): Promise<ICar> {\r\n        return new Enumerable(this).where( (it, id) => it.id == id, id).firstAsync();\r\n    }\r\n\r\n    public readAll(query: IEnumerable<ICar>, meta?: IRecordSetMeta): Promise<ICar[]> {\r\n         let specialcar: ICar,\r\n             cars = [\r\n                <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016, type: { make: 'SAAB', model: '9-3' } },\r\n                <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010, type: { make: 'NISSAN', model: 'QASHQAI' } },\r\n                <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005, type: { make: 'SAAB', model: '9-3' } },\r\n                <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004, type: { make: 'NISSAN', model: 'LEAF' } },\r\n                <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009, type: { make: 'TOYOTA', model: 'COROLLA' } },\r\n                <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014, type: { make: 'HONDA', model: 'HRV' } },\r\n                specialcar = <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013, type: { make: 'TOYOTA', model: 'YARIS' } },\r\n                <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009, type: { make: 'HONDA', model: 'CIVIC' } }\r\n            ];\r\n\r\n        for (let criteria of this.getCriteria(query)) {\r\n             switch (criteria.property) {\r\n                 case 'id':\r\n                     if (criteria.operator == '==' && criteria.value == 7) {\r\n                         if (meta) {\r\n                             meta.totalLength = 1;\r\n                         }\r\n\r\n                         return Promise.resolve([specialcar]); // optimized\r\n                     }\r\n\r\n                     break;\r\n             }\r\n        }\r\n\r\n        let skip = query.operations.first(OperatorType.Skip);\r\n        if (skip) {\r\n            query.operations.remove(skip); // removing it as we are doing this part at database level instead\r\n        }\r\n\r\n        let take = query.operations.first(OperatorType.Take);\r\n        if (take) {\r\n            query.operations.remove(take); // removing it as we are doing this part at database level instead\r\n        } \r\n        else {\r\n            take = new TakeOperator(5) // if left out, take 5 to default to paging\r\n        }\r\n\r\n        let where = query.operations.first(OperatorType.Where);\r\n        if (where) cars = cars.filter(where.predicate);\r\n\r\n        if(meta) meta.totalLength = cars.length // total cars for current filter\r\n\r\n        if (skip) cars = cars.slice(skip.count); // simulating paging at database level\r\n        if (take) cars = cars.slice(0, take.count); // simulating paging at database level\r\n    \r\n        if(meta) meta.length = cars.length // length after paging\r\n\r\n        if(meta && take) {\r\n            if( (cars.length + (skip ? skip.count : 0)) < meta.totalLength )\r\n                meta.continuationToken = `${cars.length + (skip ? skip.count : 0)}:${meta.totalLength}`\r\n            else \r\n                meta.continuationToken = null\r\n        }\r\n        \r\n        return Promise.resolve(cars); // unoptimized\r\n    }\r\n\r\n    public async * query(query: IEnumerable<ICar>, meta?: IRecordSetMeta): AsyncIterableIterator<ICar> {\r\n        if(!meta)\r\n            meta = { }\r\n        \r\n        let skip = 0\r\n        while(true) {\r\n            let cars = await this.readAll(query.skip(skip).take(2), meta)\r\n\r\n            yield * cars\r\n\r\n            // two ways, depends how readAll is implemented \r\n            if(meta.continuationToken == null || (skip + cars.length >= meta.totalLength))\r\n                break;\r\n\r\n            skip += cars.length\r\n        }\r\n    }\r\n\r\n    public async create(car: ICar): Promise<ICar> {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public async update(car: ICar): Promise<boolean> {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public async delete(car: ICar): Promise<boolean> {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public exposeIfQueryIsPageable(query: IEnumerable<ICar>): boolean {\r\n        return super.isQueryPageable(query);\r\n    }\r\n\r\n    public exposeCriteriaCount(query: IEnumerable<ICar>): number {\r\n        return super.getCriteria(query).length;\r\n    }\r\n}\r\n\r\nclass LocationRepository extends Repository<ILocation, string>\r\n{\r\n    public read(id: string): Promise<ILocation> {\r\n        return new Enumerable(this).where((it, id) => it.location == id, id).firstAsync();\r\n    }\r\n\r\n    public readAll(query: IEnumerable<ILocation>, meta?: IRecordSetMeta, parent?) {\r\n        let locations = [\r\n            <ILocation>{ location: 'SKIEN', zipcode: 3955, ziparea: 'Skien' },\r\n            <ILocation>{ location: 'PORSGRUNN', zipcode: 3949, ziparea: 'Porsgrunn' },\r\n            <ILocation>{ location: 'LANGESUND', zipcode: 3970, ziparea: 'Langesund' },\r\n            <ILocation>{ location: 'HEISTAD', zipcode: 3943, ziparea: 'Porsgrunn' },\r\n            <ILocation>{ location: 'BREVIK', zipcode: 3940, ziparea: 'Porsgrunn' }\r\n        ]\r\n\r\n        return Promise.resolve(locations);\r\n    }\r\n\r\n    public async create(car: ILocation): Promise<ILocation> {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public async update(car: ILocation): Promise<boolean> {\r\n        throw new Error('Not implemented');\r\n    }\r\n\r\n    public async delete(car: ILocation): Promise<boolean> {\r\n        throw new Error('Not implemented');\r\n    }\r\n}\r\n\r\ndescribe(\"When using Repository\", () => {\r\n    beforeEach(() => {\r\n\r\n    })\r\n\r\n    it(\"should work with query\", async () => {\r\n        let ar = await new Enumerable(new CarRepository()).toArrayAsync()\r\n\r\n        assert.equal(ar.length, 8)\r\n    })\r\n\r\n    it(\"should work with joins\", async () => {\r\n        let meta: IRecordSetMeta = <IRecordSetMeta>{},\r\n            ar = new Enumerable(new CarRepository().getIterable(meta))\r\n                .where(it => it.id == 7)\r\n                .take(5)\r\n                .join<ILocation, any>(new LocationRepository(), a => a.location, b => b.location, (a, b) => Object.assign({}, a), true)\r\n\r\n        let t = await ar.toArrayAsync();\r\n\r\n        assert.equal(t.length, 1);\r\n        assert.equal(meta.totalLength, 1);\r\n    })\r\n\r\n    it(\"should work with optimized query\", async () => {\r\n\r\n        let repo = new CarRepository(),\r\n            cars = await new Enumerable<ICar>(repo).where(it => it.id == 7).toArrayAsync();\r\n\r\n        assert.ok(repo instanceof Repository);\r\n        assert.equal(cars.length, 1)\r\n        assert.equal(cars[0].id, 7);\r\n    })\r\n\r\n    it(\"should work with random query\", async () => {\r\n\r\n        let repo = new CarRepository(),\r\n            cars = await new Enumerable<ICar>(repo).where(it => it.id == 6).toArrayAsync();\r\n\r\n        assert.ok(repo instanceof Repository);\r\n        assert.equal(cars.length, 1)\r\n        assert.equal(cars[0].id, 6);\r\n    })\r\n\r\n    it(\"should work with random query using input param\", async () => {\r\n\r\n        let repo = new CarRepository(),\r\n            cars = await new Enumerable<ICar>(repo).where((it, id) => it.id == id, 6).toArrayAsync();\r\n\r\n        assert.ok(repo instanceof Repository);\r\n        assert.equal(cars.length, 1)\r\n        assert.equal(cars[0].id, 6);\r\n    })\r\n\r\n    it(\"should be able to remove paging operations for manual handling\", async () => {\r\n\r\n        let repo = new CarRepository(),\r\n            cars: Array<ICar>;\r\n\r\n        cars = await new Enumerable(repo)\r\n            .where(it => it.registrationYear >= 2005)\r\n            .skip(5)\r\n            .take(3)\r\n            .toArrayAsync();\r\n\r\n        assert.equal(cars.length, 2);\r\n        assert.equal(cars[0].id, 7);\r\n\r\n    })\r\n\r\n    it(\"should be able to see that a query can't be pageable after plucking union expressions\", async () => {\r\n        let repo = new CarRepository(),\r\n            query = new Enumerable<ICar>(repo).where(it => (it.registrationYear == 2017 || it.location == 'NO') && it.id >= 7);\r\n\r\n        assert.equal(repo.exposeIfQueryIsPageable(query), false)\r\n    })\r\n\r\n    it(\"should be able to see that a query can be pageable after plucking union expressions\", async () => {\r\n        let repo = new CarRepository(),\r\n            query = new Enumerable<ICar>(repo).where(it => it.location == 'NO' && it.registrationYear >= 2000);\r\n\r\n        assert.equal(repo.exposeCriteriaCount(query), 2);\r\n        assert.equal(repo.exposeIfQueryIsPageable(query), true)\r\n    })\r\n\r\n    it(\"should be able to see that a query can be pageable after plucking union expressions that is common\", async () => {\r\n        let repo = new CarRepository(),\r\n            query = new Enumerable<ICar>(repo).where(it => (it.location == 'NO') || (it.registrationYear >= 2000 && it.location == 'NO'));\r\n\r\n        assert.equal(repo.exposeCriteriaCount(query), 1);\r\n        assert.equal(repo.exposeIfQueryIsPageable(query), false)\r\n    })\r\n})"]}