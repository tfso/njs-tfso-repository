{"version":3,"file":"javascriptvisitor.js","sourceRoot":"","sources":["../../src/test/javascriptvisitor.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAChE,+EAA4E;AAE5E,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC1C,IAAI,OAA0B,EAC1B,IAAI,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;IAEtH,UAAU,CAAC,GAAG,EAAE;QACZ,OAAO,GAAG,IAAI,qCAAiB,EAAE,CAAC;IACtC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACjE,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAC1C,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QACzD,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,EACxD,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC3D,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAC9D,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAE3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,MAAM,CAAC,KAAK,CAA0B,IAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAA;IAEF,+DAA+D;IAC/D,8FAA8F;IAC9F,kDAAkD;IAElD,4DAA4D;IAC5D,gEAAgE;IAChE,KAAK;AAET,CAAC,CAAC,CAAA","sourcesContent":["import * as assert from 'assert';\r\nimport * as Expr from './../linq/expressions/expressionvisitor';\r\nimport { JavascriptVisitor } from './../linq/expressions/javascriptvisitor';\r\n\r\ndescribe(\"When using JavascriptVisitor\", () => {\r\n    var reducer: JavascriptVisitor,\r\n        vars = { number: 5, string: 'abc', decimal: 5.50, date: new Date(\"2017-05-10T06:48:00Z\"), object: { number: 7 } };\r\n\r\n    beforeEach(() => {\r\n        reducer = new JavascriptVisitor();\r\n    })\r\n\r\n    it(\"should evaluate a simple expression with binary operation\", () => {\r\n        let reduced = reducer.visitLambda(() => 2 + 3),\r\n            expr = reducer.evaluate(reduced, vars);\r\n\r\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\r\n        assert.equal((<Expr.LiteralExpression>expr).value, 5);\r\n    })\r\n\r\n    it(\"should be able to do string operations at literal\", () => {\r\n        let reduced = reducer.visitLambda(() => \"ABC\".toLowerCase()),\r\n            expr = reducer.evaluate(reduced, vars);\r\n\r\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\r\n        assert.equal((<Expr.LiteralExpression>expr).value, 'abc');\r\n    })\r\n\r\n    it(\"should be able to do string operations at variables\", () => {\r\n        let reduced = reducer.visitLambda(() => this.string.toUpperCase()),\r\n            expr = reducer.evaluate(reduced, vars);\r\n\r\n        assert.equal(expr.type, Expr.ExpressionType.Literal);\r\n        assert.equal((<Expr.LiteralExpression>expr).value, 'ABC');\r\n    })\r\n\r\n    // it(\"should evaluate a expression with date as type\", () => {\r\n    //     let reduced = reducer.visitLambda((date) => date > this.date, new Date('2017-06-01Z')),\r\n    //         expr = reducer.evaluate(reduced, vars);\r\n\r\n    //     assert.equal(expr.type, Expr.ExpressionType.Literal);\r\n    //     assert.equal((<Expr.LiteralExpression>expr).value, true);\r\n    // })\r\n\r\n})"]}