{"version":3,"file":"repository_readall.js","sourceRoot":"","sources":["../../src/test/repository_readall.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\nimport Repository from './../repository/baserepository';\nimport Enumerable, { IEnumerable } from './../linq/enumerable';\n\ndescribe(\"When using repository to read all\", () => {\n    var repository: CarRepository;\n\n    beforeEach(() => {\n        repository = new CarRepository();\n    })\n\n    it(\"should handle non existing where\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().skip(5).take(3))\n\n        assert.ok(list != null, \"expected filters\")\n        assert.ok(list.length == 0, \"Expected 0 filter\")\n    })\n\n    it(\"should handle multiple or/and expressions\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => car.registrationYear >= 2016 || car.location == 'NO' && car.registrationYear > 2000 && car.id != null && (car.registrationYear > 2000 || car.registrationYear == 1999)))\n\n        assert.ok(list.length == 0, \"Expected non common filters\")\n    })\n\n    it(\"should return a single filter\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => car.location == 'PORSGRUNN'));\n\n        assert.ok(list.length == 1, \"Expected one criteria\");\n    })\n\n    it(\"should return a single filter with two criteria\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => car.registrationYear > 2015 && car.location == 'PORSGRUNN'));\n\n        assert.ok(list.length == 2, \"Expected two criteria\");\n    })\n\n    it(\"should return a criteria using property to be equal value\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => car.location == 'NO'));\n\n        assert.ok(list.length == 1, \"Expected a single criteria\");\n        assert.ok(list[0].property == \"location\", \"Expected property to be 'location'\");\n        assert.ok(list[0].value == \"NO\", \"Expected value to be 'NO'\");\n    })\n\n    it(\"should return a criteria using property to be greater than value\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => car.registrationYear > 2000));\n\n        assert.ok(list.length == 1, \"Expected a single criteria\");\n        assert.ok(list[0].property == \"registrationYear\", \"Expected property to be 'registrationYear'\");\n        assert.ok(list[0].value == 2000, \"Expected value to be 2000\");\n        assert.ok(list[0].operator == \">\", \"Expected operator to be greater than\");\n    })\n\n    it(\"should return a criteria using property to be greater than value just the other way around\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => 2000 < car.registrationYear));\n\n        assert.ok(list.length == 1, \"Expected a single criteria\");\n        assert.ok(list[0].property == \"registrationYear\", \"Expected property to be 'registrationYear'\");\n        assert.ok(list[0].value == 2000, \"Expected value to be 2000\");\n        assert.ok(list[0].operator == \">\", \"Expected operator to be greater than\");\n    })\n\n    //it(\"should cast an exception if a unsolvable expression is used\", () => {\n    //    assert.throws(\n    //        () => {\n    //            repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => this.unknown == 5));\n    //        },\n    //        Error\n    //    );\n    //})\n\n    it(\"should intersection filter properties that is common \", () => {\n        var intersection = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => (car.registrationYear == 2015 && car.location == 'NO') || car.registrationYear == 2015 || (car.location == 'SE' && car.registrationYear == 2015)));\n        \n        assert.ok(intersection.length == 1, \"Expected one criteria from intersection\");\n        assert.ok(intersection[0].property == \"registrationYear\", \"Expected property to be 'registrationYear'\");\n    })\n\n    it(\"should intersection filter properties that is not common\", () => {\n        var intersection = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => (car.registrationYear > 2015 && car.location == 'NO') || car.registrationYear == 2015 || (car.location == 'SE' && car.registrationYear == 2015)));\n\n        assert.ok(intersection.length == 0, \"Expected zero criteria from intersection\");\n    })\n\n    it(\"should handle method calls\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where((car: ICar) => car.location.toLowerCase() == \"no\"));\n\n        if (Date.now() < new Date(2020, 4, 1).getTime())\n            return;\n\n        assert.ok(false);\n\n        //assert.ok(list.length == 1, \"Expected a single criteria\");\n        //assert.ok(list[0].method == \"toLowerCase\");\n    })\n\n    it(\"should handle some unary expressions\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where( (it, date) => +it.registrationDate == +date, new Date(2017,11,1)))\n\n        assert.equal(list.length, 1);\n        assert.equal(list[0].property, 'registrationDate')\n        assert.equal(list[0].operator, '==');\n        assert.equal(list[0].value.toISOString(), new Date(2017,11,1).toISOString());\n    })\n\n    it(\"should handle nested member expressions\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where(car => car.type.make == \"Toyota\"));\n\n        assert.equal(list.length, 1);\n        assert.equal(list[0].property, 'type.make')\n        assert.equal(list[0].operator, '==');\n        assert.equal(list[0].value, 'Toyota');\n\n    })\n\n    it(\"should handle odata using exact query\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where(\"tolower(location) eq 'porsgrunn'\"))\n\n        assert.equal(list.length, 1);\n        assert.equal(list[0].property, 'location')\n        assert.equal(list[0].operator, '==');\n        assert.equal(list[0].value, 'porsgrunn');\n    })\n\n    it(\"should handle odata using wildcard (starts) query\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where(\"startswith(tolower(location), 'porsgr')\"))\n\n        assert.equal(list.length, 1);\n        assert.equal(list[0].property, 'location')\n        assert.equal(list[0].operator, '==');\n        assert.equal(list[0].value, 'porsgr');\n        assert.equal(list[0].wildcard, 'right');\n    })\n    \n    it(\"should handle odata using wildcard (ends) query\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where(\"endswith(tolower(location), 'grunn')\"))\n\n        assert.equal(list.length, 1);\n        assert.equal(list[0].property, 'location')\n        assert.equal(list[0].operator, '==');\n        assert.equal(list[0].value, 'grunn');\n        assert.equal(list[0].wildcard, 'left');\n    })\n\n    it(\"should handle odata using wildcard (starts/ends) query\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where(\"contains(tolower(location), 'orsgru')\"))\n\n        assert.equal(list.length, 1);\n        assert.equal(list[0].property, 'location')\n        assert.equal(list[0].operator, '==');\n        assert.equal(list[0].value, 'orsgru');\n        assert.equal(list[0].wildcard, 'both');\n    })\n\n    it(\"should handle odata using wildcard with other queries\", () => {\n        var list = repository.exposeFilters(new Enumerable<ICar>().where(\"reqistrationYear eq 2017 and contains(tolower(location), 'ors')\"))\n\n        assert.equal(list.length, 2);\n    })\n});\n\n\ninterface ICar {\n\n    id: number\n    location: string\n\n    registrationYear: number\n    registrationDate: Date\n\n    type: {\n        make: string\n        model: string\n    }\n}\n\nclass CarRepository extends Repository<ICar, number>\n{\n    constructor() {\n        super();\n    }\n\n    public read(id) {\n        return Promise.reject<ICar>(new Error('Not implemented'));\n    }\n\n    public readAll(predicate) {\n        return Promise.reject<ICar[]>(new Error('Not implemented'));\n    }\n\n    public delete(entity) {\n        return Promise.reject<boolean>(new Error('Not implemented'));\n    }\n\n    public update(entity) {\n        return Promise.reject<boolean>(new Error('Not implemented'));\n    }\n\n    public create(entity: ICar) {\n        return Promise.reject<ICar>(new Error('Not implemented'));\n    }\n\n    public exposeFilters(query: IEnumerable<ICar>) {\n        return super.getCriteria(query);\n    }\n}"]}