{"version":3,"file":"expressionvisitor_binary_expression.js","sourceRoot":"","sources":["../../src/test/expressionvisitor_binary_expression.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\r\nimport * as Expr from './../linq/expressions/expressionvisitor';\r\n\r\ndescribe(\"When using ExpressionVisitor for binary\", () => {\r\n    var visitor: Expr.ExpressionVisitor,\r\n        expr: Expr.IExpression;\r\n\r\n    beforeEach(() => {\r\n        visitor = new Expr.ExpressionVisitor;\r\n    })\r\n\r\n    describe(\"equalization\", () => {\r\n        it(\"should compare for operation of addition that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 + 2);\r\n            let b = visitor.visitLambda(() => 6 + 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of addition that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 + 2);\r\n            let b = visitor.visitLambda(() => 2 + 6);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of subtraction that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 - 2);\r\n            let b = visitor.visitLambda(() => 6 - 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of subtraction that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 - 2);\r\n            let b = visitor.visitLambda(() => 2 - 6);\r\n\r\n            assert.ok(a.equal(b) == false);\r\n        })\r\n\r\n        it(\"should compare for operation of multiplication that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 * 2);\r\n            let b = visitor.visitLambda(() => 6 * 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of multiplication that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 * 2);\r\n            let b = visitor.visitLambda(() => 2 * 6);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of division that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 / 2);\r\n            let b = visitor.visitLambda(() => 6 / 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of division that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 / 2);\r\n            let b = visitor.visitLambda(() => 2 / 6);\r\n\r\n            assert.ok(a.equal(b) == false);\r\n        })\r\n\r\n        it(\"should compare for operation of modulus that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 % 2);\r\n            let b = visitor.visitLambda(() => 6 % 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of modulus that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 % 2);\r\n            let b = visitor.visitLambda(() => 2 % 6);\r\n\r\n            assert.ok(a.equal(b) == false);\r\n        })\r\n\r\n        it(\"should compare for operation of and that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 & 2);\r\n            let b = visitor.visitLambda(() => 6 & 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of and that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 & 2);\r\n            let b = visitor.visitLambda(() => 2 & 6);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of or that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 | 2);\r\n            let b = visitor.visitLambda(() => 6 | 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of or that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 | 2);\r\n            let b = visitor.visitLambda(() => 2 | 6);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of exlusive or that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 ^ 2);\r\n            let b = visitor.visitLambda(() => 6 ^ 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of exlusive or that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 ^ 2);\r\n            let b = visitor.visitLambda(() => 2 ^ 6);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of right shift that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 >> 2);\r\n            let b = visitor.visitLambda(() => 6 >> 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of right shift that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 >> 2);\r\n            let b = visitor.visitLambda(() => 2 >> 6);\r\n\r\n            assert.ok(a.equal(b) == false);\r\n        })\r\n\r\n        it(\"should compare for operation of left shift that is 100% equal\", () => {\r\n            let a = visitor.visitLambda(() => 6 << 2);\r\n            let b = visitor.visitLambda(() => 6 << 2);\r\n\r\n            assert.ok(a.equal(b) == true);\r\n        })\r\n\r\n        it(\"should compare for operation of left shift that is inverted\", () => {\r\n            let a = visitor.visitLambda(() => 6 << 2);\r\n            let b = visitor.visitLambda(() => 2 << 6);\r\n\r\n            assert.ok(a.equal(b) == false);\r\n        })\r\n    })\r\n\r\n    describe(\"OData Expression\", () => {\r\n        it(\"should return a binary operation\", () => {\r\n            expr = visitor.visitOData(\"5 add 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n\r\n            assert.ok((<Expr.IBinaryExpression>expr).left.type == Expr.ExpressionType.Literal, \"Expected a literal at left side\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a lteral at right side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == 2, \"Expected number 2 at right side\");\r\n        });\r\n\r\n        it(\"should handle binary operation for addition for negative number\", () => {\r\n            expr = visitor.visitOData(\"5 add -2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == -2, \"Expected number -2 at right side\");\r\n        });\r\n\r\n        it(\"should handle binary operation for addition for positive number\", () => {\r\n            expr = visitor.visitOData(\"5 add +2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == 2, \"Expected number 2 at right side\");\r\n        });\r\n\r\n        it(\"should handle binary operation for subtraction\", () => {\r\n            expr = visitor.visitOData(\"5 sub 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n        });\r\n\r\n        it(\"should handle binary operation for subtraction for negative number\", () => {\r\n            expr = visitor.visitOData(\"5 sub -2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == -2, \"Expected number -2 at right side\");\r\n        });\r\n\r\n        it(\"should handle binary operation for subtraction for positive number\", () => {\r\n            expr = visitor.visitOData(\"5 sub +2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == 2, \"Expected number 2 at right side\");\r\n        });\r\n\r\n        it(\"should handle binary operation for multiplication\", () => {\r\n            expr = visitor.visitOData(\"5 mul 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Multiplication, \"Expected a binary operation of multiplication\");\r\n        });\r\n\r\n        it(\"should handle binary operation for division\", () => {\r\n            expr = visitor.visitOData(\"5 div 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Division, \"Expected a binary operation of division\");\r\n        });\r\n\r\n        it(\"should handle binary operation for modulus\", () => {\r\n            expr = visitor.visitOData(\"5 mod 2\");\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Modulus, \"Expected a binary operation of modulus\");\r\n        });\r\n\r\n        it(\"should handle toString\", () => {\r\n            assert.equal(visitor.visitOData(\"5 add 2\").toString(), \"5 + 2\");\r\n            assert.equal(visitor.visitOData(\"5 add +2\").toString(), \"5 + 2\");\r\n            assert.equal(visitor.visitOData(\"5 add -2\").toString(), \"5 + -2\");\r\n        })\r\n    })\r\n\r\n    describe(\"Lambda Expression\", () => {\r\n        it(\"should return a binary operation\", () => {\r\n            expr = visitor.visitLambda(() => 5 + 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).left.type == Expr.ExpressionType.Literal, \"Expected a literal at left side\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a lteral at right side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n            assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == 2, \"Expected number 5 at right side\");\r\n        });\r\n\r\n        it(\"should handle binary operation for addition\", () => {\r\n            expr = visitor.visitLambda(() => 5 + 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n        });\r\n\r\n        it(\"should handle binary operation for addition for negative number\", () => {\r\n            expr = visitor.visitLambda(() => 5 + -2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a literal at right side of addition\");\r\n        });\r\n\r\n        it(\"should handle binary operation for addition for positive number\", () => {\r\n            expr = visitor.visitLambda(() => 5 + +2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a literal at right side of addition\");\r\n        });\r\n\r\n        it(\"should handle binary operation for subtraction\", () => {\r\n            expr = visitor.visitLambda(() => 5 - 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n        });\r\n\r\n        it(\"should handle binary operation for subtraction for negative number\", () => {\r\n            expr = visitor.visitLambda(() => 5 - -2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a literal at right side of addition\");\r\n        });\r\n\r\n        it(\"should handle binary operation for subtraction for positive number\", () => {\r\n            expr = visitor.visitLambda(() => 5 - +2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a literal at right side of addition\");\r\n        });\r\n\r\n        it(\"should handle binary operation for multiplication\", () => {\r\n            expr = visitor.visitLambda(() => 5 * 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Multiplication, \"Expected a binary operation of multiplication\");\r\n        });\r\n\r\n        it(\"should handle binary operation for division\", () => {\r\n            expr = visitor.visitLambda(() => 5 / 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Division, \"Expected a binary operation of division\");\r\n        });\r\n\r\n        it(\"should handle binary operation for modulus\", () => {\r\n            expr = visitor.visitLambda(() => 5 % 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Modulus, \"Expected a binary operation of modulus\");\r\n        });\r\n\r\n        it(\"should handle binary operation for and\", () => {\r\n            expr = visitor.visitLambda(() => 5 & 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.And, \"Expected a binary operation of and\");\r\n        });\r\n\r\n        it(\"should handle binary operation for or\", () => {\r\n            expr = visitor.visitLambda(() => 5 | 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Or, \"Expected a binary operation of or\");\r\n        });\r\n\r\n        it(\"should handle binary operation for left shift\", () => {\r\n            expr = visitor.visitLambda(() => 5 << 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.LeftShift, \"Expected a binary operation of left shift\");\r\n        });\r\n\r\n        it(\"should handle binary operation for right shift\", () => {\r\n            expr = visitor.visitLambda(() => 5 >> 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.RightShift, \"Expected a binary operation of right shift\");\r\n        });\r\n\r\n        it(\"should handle binary operation for zero-fill right shift\", () => {\r\n            expr = visitor.visitLambda(() => 5 >>> 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.RightShift, \"Expected a binary operation of right shift\");\r\n        });\r\n\r\n        it(\"should handle binary operation for exlusive or\", () => {\r\n            expr = visitor.visitLambda(() => 5 ^ 2);\r\n\r\n            assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n            assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.ExclusiveOr, \"Expected a binary operation of exclusive or\");\r\n        });\r\n\r\n        it(\"should handle toString\", () => {\r\n            assert.equal(visitor.visitLambda(() => 5 + 2).toString(), \"5 + 2\");\r\n            assert.equal(visitor.visitLambda(() => 5 + +2).toString(), \"5 + 2\");\r\n            assert.equal(visitor.visitLambda(() => 5 + -2).toString(), \"5 + -2\");\r\n            assert.equal(visitor.visitLambda(() => 5 - 2).toString(), \"5 - 2\");\r\n            assert.equal(visitor.visitLambda(() => 5 - +2).toString(), \"5 - 2\");\r\n            assert.equal(visitor.visitLambda(() => 5 - -2).toString(), \"5 - -2\");\r\n\r\n            assert.equal(visitor.visitLambda(() => 5 + 2 * 4).toString(), \"5 + (2 * 4)\");\r\n            assert.equal(visitor.visitLambda(() => (5 + 2) * 4).toString(), \"(5 + 2) * 4\");\r\n        })\r\n    })\r\n});\r\n"]}