{"version":3,"file":"expressionvisitor_array_expression.js","sourceRoot":"","sources":["../../src/test/expressionvisitor_array_expression.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAEhE,QAAQ,CAAC,0DAA0D,EAAE,GAAG,EAAE;IACtE,IAAI,OAA+B,EAC/B,IAAsB,CAAC;IAE3B,UAAU,CAAC,GAAG,EAAE;QACZ,OAAO,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC;IACzC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,eAAe,CAAC,CAAC;QACnF,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;QACvF,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,wBAAwB,CAAC,CAAC;IACnG,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from 'assert';\nimport * as Expr from './../linq/expressions/expressionvisitor';\n\ndescribe(\"When using ExpressionVisitor for array Lambda expression\", () => {\n    var visitor: Expr.ExpressionVisitor,\n        expr: Expr.IExpression;\n\n    beforeEach(() => {\n        visitor = new Expr.ExpressionVisitor;\n    })\n\n    it(\"it should handle toString\", () => {\n        assert.equal(visitor.visitLambda(() => ['yes', 'no']).toString(), '[\"yes\", \"no\"]');\n        assert.equal(visitor.visitLambda(() => [1, 2+4, 4, 8]).toString(), \"[1, 2 + 4, 4, 8]\");\n        assert.equal(visitor.visitLambda(() => [1, 2+4*4, 4, 8]).toString(), \"[1, 2 + (4 * 4), 4, 8]\");\n    });\n\n});\n"]}