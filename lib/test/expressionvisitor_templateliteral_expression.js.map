{"version":3,"file":"expressionvisitor_templateliteral_expression.js","sourceRoot":"","sources":["../../src/test/expressionvisitor_templateliteral_expression.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAEhE,QAAQ,CAAC,qEAAqE,EAAE,GAAG,EAAE;IACjF,IAAI,OAA+B,EAC/B,IAAsB,CAAC;IAE3B,UAAU,CAAC,GAAG,EAAE;QACZ,OAAO,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC;IACzC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,8CAA8C,CAAC,CAAC;IACnJ,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from 'assert';\nimport * as Expr from './../linq/expressions/expressionvisitor';\n\ndescribe(\"When using ExpressionVisitor for template literal Lambda expression\", () => {\n    var visitor: Expr.ExpressionVisitor,\n        expr: Expr.IExpression;\n\n    beforeEach(() => {\n        visitor = new Expr.ExpressionVisitor;\n    })\n\n    it(\"it should handle toString\", () => {\n        assert.equal(visitor.visitLambda(() => `My number is ${5} and the next is ${5+1}`).toString(), '`My number is ${5} and the next is ${5 + 1}`');\n    })\n});\n"]}