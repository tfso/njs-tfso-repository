{"version":3,"file":"expressionvisitor_member_expression.js","sourceRoot":"","sources":["../../src/test/expressionvisitor_member_expression.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gEAAgE;AAEhE,QAAQ,CAAC,2DAA2D,EAAE,GAAG,EAAE;IACvE,IAAI,OAA+B,EAC/B,IAAsB,CAAC;IAE3B,UAAU,CAAC,GAAG,EAAE;QACZ,OAAO,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC;IACzC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC5C,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3C,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,6BAA6B,CAAC,CAAC;QAClF,MAAM,CAAC,EAAE,CAA0B,IAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,iCAAiC,CAAC,CAAC;QAC3H,MAAM,CAAC,EAAE,CAA0B,IAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,mCAAmC,CAAC,CAAC;IACnI,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QAC/D,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7C,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,6BAA6B,CAAC,CAAC;QAClF,MAAM,CAAC,EAAE,CAA0B,IAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,iCAAiC,CAAC,CAAC;QAC3H,MAAM,CAAC,EAAE,CAA0B,IAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,yCAAyC,CAAC,CAAC;QAChI,MAAM,CAAC,EAAE,CAAkD,IAAK,CAAC,QAAS,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,wDAAwD,CAAC,CAAC;QACpL,MAAM,CAAC,EAAE,CAAkD,IAAK,CAAC,QAAS,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,mDAAmD,CAAC,CAAC;IAC/K,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import * as assert from 'assert';\r\nimport * as Expr from './../linq/expressions/expressionvisitor';\r\n\r\ndescribe(\"When using ExpressionVisitor for member Lambda expression\", () => {\r\n    var visitor: Expr.ExpressionVisitor,\r\n        expr: Expr.IExpression;\r\n\r\n    beforeEach(() => {\r\n        visitor = new Expr.ExpressionVisitor;\r\n    })\r\n\r\n    it(\"it should return a member expression\", () => {\r\n        expr = visitor.visitLambda(() => this.num);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Member, \"Expected a MemberExpression\");\r\n        assert.ok((<Expr.IMemberExpression>expr).object.type == Expr.ExpressionType.Identifier, \"Expected a identifier as object\");\r\n        assert.ok((<Expr.IMemberExpression>expr).property.type == Expr.ExpressionType.Identifier, \"Expected a identifier as property\");\r\n    })\r\n\r\n    it(\"it should return a member expression with array indexer\", () => {\r\n        expr = visitor.visitLambda(() => this.ar[5]);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Member, \"Expected a MemberExpression\");\r\n        assert.ok((<Expr.IMemberExpression>expr).object.type == Expr.ExpressionType.Identifier, \"Expected a identifier as object\");\r\n        assert.ok((<Expr.IMemberExpression>expr).property.type == Expr.ExpressionType.Index, \"Expected a index expression as property\");\r\n        assert.ok((<Expr.IIndexExpression>(<Expr.IMemberExpression>expr).property).object.type == Expr.ExpressionType.Identifier, \"Expected the object of index property is an identifier\");\r\n        assert.ok((<Expr.IIndexExpression>(<Expr.IMemberExpression>expr).property).index.type == Expr.ExpressionType.Literal, \"Expected the index of index property is a literal\");\r\n    })\r\n})\r\n"]}